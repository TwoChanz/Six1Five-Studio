{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Six1Five Studio - Reality Capture Portfolio\n\n## Overview\n\nThis is a full-stack web application for Six1Five Studio, a reality capture company specializing in drone mapping, LiDAR scanning, and photogrammetry services. The application serves as a professional portfolio showcasing 3D models, project walkthroughs, and client deliverables for the AEC (Architecture, Engineering, Construction), real estate, and historic preservation industries.\n\n## Recent Changes\n\n**Conversion Optimization & Professional Enhancement (January 26, 2025)**\n- Implemented sticky navigation with persistent \"Book a Scan\" CTA for better conversion\n- Added value proposition below hero headline for immediate clarity\n- Enhanced services section with better visual spacing, bullet-pointed benefits, and mini-CTAs\n- Added project type and location fields to contact form for better lead qualification\n- Integrated testimonials section with FAA Part 107 certification and trust signals\n- Created final CTA banner with multiple conversion touchpoints\n- Fixed theme toggle to show opposite state icon (sun for dark mode, moon for light mode)\n- Added deliverables section to portfolio showcasing specific project outputs\n- Enhanced portfolio section with thumbnail previews and \"See full project\" CTAs\n- Improved AI workflow showcase with interactive features and mini-CTAs throughout\n\n**Authentic Project Portfolio Integration (January 16, 2025)**\n- Replaced placeholder portfolio items with actual reality capture projects\n- Added Murphy Center MTSU textured mesh documentation project\n- Integrated historic farmhouse heritage documentation with texture mapping\n- Added Freedom Bell Memorial vandalism documentation for legal/restoration purposes\n- Updated existing Watchtower Shooting House project with Sketchfab model integration\n- Enhanced blog content with real project case studies and regulatory compliance examples\n- Improved button and badge contrast throughout the site for better accessibility\n\n**Enhanced Database Schema & Content Management (January 16, 2025)**\n- Expanded database schema with blog_posts and portfolio_items tables\n- Added comprehensive API routes for blog and portfolio management (GET/POST endpoints)\n- Populated database with authentic portfolio items and educational blog posts\n- Integrated real Sketchfab 3D model viewer with \"Watchtower | Shooting House\" model\n- Enhanced contact form with file upload, project timeline, and budget range fields\n- Added comprehensive FAQ page with categorized questions and professional styling\n\n**Enhanced Portfolio & Gallery System (January 16, 2025)**\n- Updated portfolio section to fetch data from PostgreSQL database\n- Integrated multiple Sketchfab 3D model viewers throughout portfolio sections\n- Created dedicated gallery page with filtering by category and view modes\n- Added structured data markup for local business SEO optimization\n- Enhanced blog system with database integration and educational content\n\n**Professional Profile Integration (January 15, 2025)**\n- Enhanced About section with authentic LinkedIn profile information\n- Integrated real profile image of Chandler Hopkins\n- Added LinkedIn profile links and Substack \"Digital Blueprint\" blog\n- Updated contact information with real phone and email\n- Incorporated MTSU Construction Management education background\n- Added Estes Express Lines Operations Shift Leader position\n- Enhanced technical skills based on actual certifications and experience\n- Updated service area to reflect La Vergne, Tennessee location\n\n**Database Integration (January 15, 2025)**\n- Added PostgreSQL database with Drizzle ORM for persistent data storage\n- Migrated from in-memory storage to DatabaseStorage class\n- Created database schema with users and contact_submissions tables\n- Updated storage interface to use actual database queries\n\n**Enhanced About Section with Interactive Tech Tags (January 15, 2025)**\n- Added punchy opening line: \"From farm foundations to digital replicas—bringing real-world sites into stunning 3D\"\n- Integrated Matthew Byrd quote about reality capture as contextual authority\n- Created interactive tech tags with hover tooltips for tools (RealityCapture, CloudCompare, LiDAR, etc.)\n- Refined professional background to focus on Reality Capture-relevant AEC and agricultural experience\n- Removed unrelated professional roles, emphasizing field conditions and site planning expertise\n- Added large Tennessee state outline SVG background with Nashville metro area highlight\n- Implemented glowing location pin with custom CSS animation for service area indicator\n\n**Sketchfab Integration (January 15, 2025)**\n- Integrated real Sketchfab 3D model viewer in hero section featuring \"Watchtower | Shooting House\" model\n- Updated portfolio section to showcase actual project from six1fivemedia Sketchfab profile\n- Added clickable links to view models on Sketchfab platform\n- Fixed TypeScript error in storage.ts for contact submissions\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nProfile Focus: Include only Reality Capture-relevant background and AEC/agricultural experience that directly supports aerial imagery and 3D mapping expertise. Avoid unrelated professional roles.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with custom tech-industrial color palette\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state\n- **Forms**: React Hook Form with Zod validation\n- **Build Tool**: Vite for development and bundling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Session Management**: Express sessions with PostgreSQL store\n- **Development**: Hot reload with Vite middleware integration\n\n### Design System\n- **Theme**: Dark tech-industrial aesthetic with custom CSS variables\n- **Colors**: Concrete gray, drone orange, sky blue, tech green\n- **Typography**: Modern sans-serif with monospace accents\n- **Animations**: Scanline effects, pulse animations, smooth transitions\n\n## Key Components\n\n### Core Features\n1. **Hero Section**: Interactive 3D model viewer (Sketchfab integration ready)\n2. **Portfolio Showcase**: Project galleries with before/after comparisons\n3. **Service Categories**: Flip cards showing workflows and tools\n4. **Contact System**: Form with service selection and project details\n5. **Responsive Design**: Mobile-first approach with progressive enhancement\n\n### UI Components\n- **Navigation**: Fixed header with smooth scroll navigation\n- **3D Viewers**: Placeholder for Sketchfab/NeRF model integration\n- **Form Components**: Multi-step contact forms with validation\n- **Animation Effects**: Custom CSS for tech-themed visual effects\n\n### Content Structure\n- **Services**: Aerial capture, photogrammetry, LiDAR integration\n- **Industries**: Construction, real estate, historic preservation\n- **Technologies**: DJI drones, FARO scanners, RealityCapture, Metashape\n\n## Data Flow\n\n### Client-Server Communication\n1. **API Requests**: RESTful endpoints with JSON payloads\n2. **Form Submissions**: Contact forms with service selection arrays\n3. **Error Handling**: Centralized error boundaries with user feedback\n4. **Loading States**: React Query provides caching and loading states\n\n### Database Schema\n- **Users Table**: Basic user authentication (future expansion)\n- **Contact Submissions**: Form data with services array and timestamps\n- **Validation**: Zod schemas for type-safe data validation\n\n### State Management\n- **Server State**: TanStack Query for API data and caching\n- **Form State**: React Hook Form for complex form interactions\n- **UI State**: React state for modals, navigation, and animations\n\n## External Dependencies\n\n### Core Libraries\n- **@tanstack/react-query**: Server state management and caching\n- **@hookform/resolvers**: Form validation with Zod integration\n- **drizzle-orm**: Type-safe SQL query builder\n- **@neondatabase/serverless**: PostgreSQL connection for serverless environments\n\n### UI/UX Libraries\n- **@radix-ui/***: Headless UI primitives for accessibility\n- **lucide-react**: Modern icon library\n- **class-variance-authority**: Type-safe CSS class management\n- **tailwindcss**: Utility-first CSS framework\n\n### Development Tools\n- **typescript**: Static type checking\n- **vite**: Fast build tool and development server\n- **drizzle-kit**: Database migration and schema management\n\n### 3D Integration (Planned)\n- **Sketchfab**: 3D model hosting and embedding\n- **Three.js**: Custom 3D viewers and interactions\n- **WebGL**: Hardware-accelerated 3D graphics\n\n## Deployment Strategy\n\n### Build Process\n- **Client Build**: Vite bundles React app to `dist/public`\n- **Server Build**: esbuild compiles Express server to `dist/index.js`\n- **Database**: Drizzle migrations with PostgreSQL\n\n### Environment Configuration\n- **Development**: Local server with Vite middleware and HMR\n- **Production**: Static file serving with Express backend\n- **Database**: Environment variable configuration for connection strings\n\n### Performance Considerations\n- **Code Splitting**: Vite automatic chunking for optimal loading\n- **Image Optimization**: Placeholder system for 3D model thumbnails\n- **Caching**: TanStack Query for client-side data caching\n- **SEO**: Meta tags and semantic HTML structure\n\n### Platform Compatibility\n- **Replit**: Configured for Replit development environment\n- **Mobile**: Responsive design with touch-friendly interactions\n- **Browsers**: Modern browser support with ES6+ features","size_bytes":9727},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSubmissionSchema, insertBlogPostSchema, insertPortfolioItemSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Contact form submission\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactSubmissionSchema.parse(req.body);\n      const submission = await storage.createContactSubmission(validatedData);\n      res.json({ success: true, submission });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid form data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  // Get all contact submissions (for admin use)\n  app.get(\"/api/contact\", async (req, res) => {\n    try {\n      const submissions = await storage.getContactSubmissions();\n      res.json(submissions);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Blog routes\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      const posts = await storage.getPublishedBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Blog fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:slug\", async (req, res) => {\n    try {\n      const { slug } = req.params;\n      const post = await storage.getBlogPostBySlug(slug);\n      if (!post) {\n        return res.status(404).json({ error: \"Post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      console.error(\"Blog post fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch blog post\" });\n    }\n  });\n\n  app.post(\"/api/blog\", async (req, res) => {\n    try {\n      const post = insertBlogPostSchema.parse(req.body);\n      const result = await storage.createBlogPost(post);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Blog post creation error:\", error);\n      res.status(400).json({ error: \"Invalid blog post data\" });\n    }\n  });\n\n  // Portfolio routes\n  app.get(\"/api/portfolio\", async (req, res) => {\n    try {\n      const items = await storage.getPublishedPortfolioItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Portfolio fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch portfolio items\" });\n    }\n  });\n\n  app.get(\"/api/portfolio/featured\", async (req, res) => {\n    try {\n      const items = await storage.getFeaturedPortfolioItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Featured portfolio fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch featured portfolio items\" });\n    }\n  });\n\n  app.get(\"/api/portfolio/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const item = await storage.getPortfolioItemById(parseInt(id));\n      if (!item) {\n        return res.status(404).json({ error: \"Portfolio item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      console.error(\"Portfolio item fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch portfolio item\" });\n    }\n  });\n\n  app.post(\"/api/portfolio\", async (req, res) => {\n    try {\n      const item = insertPortfolioItemSchema.parse(req.body);\n      const result = await storage.createPortfolioItem(item);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Portfolio item creation error:\", error);\n      res.status(400).json({ error: \"Invalid portfolio item data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3829},"server/storage.ts":{"content":"import { \n  users, \n  contactSubmissions, \n  blogPosts, \n  portfolioItems, \n  type User, \n  type InsertUser, \n  type ContactSubmission, \n  type InsertContactSubmission,\n  type BlogPost,\n  type InsertBlogPost,\n  type PortfolioItem,\n  type InsertPortfolioItem\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission>;\n  getContactSubmissions(): Promise<ContactSubmission[]>;\n  \n  // Blog methods\n  getBlogPosts(): Promise<BlogPost[]>;\n  getPublishedBlogPosts(): Promise<BlogPost[]>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  \n  // Portfolio methods\n  getPortfolioItems(): Promise<PortfolioItem[]>;\n  getPublishedPortfolioItems(): Promise<PortfolioItem[]>;\n  getFeaturedPortfolioItems(): Promise<PortfolioItem[]>;\n  getPortfolioItemById(id: number): Promise<PortfolioItem | undefined>;\n  createPortfolioItem(item: InsertPortfolioItem): Promise<PortfolioItem>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createContactSubmission(insertSubmission: InsertContactSubmission): Promise<ContactSubmission> {\n    const [submission] = await db\n      .insert(contactSubmissions)\n      .values(insertSubmission)\n      .returning();\n    return submission;\n  }\n\n  async getContactSubmissions(): Promise<ContactSubmission[]> {\n    return await db\n      .select()\n      .from(contactSubmissions)\n      .orderBy(desc(contactSubmissions.createdAt));\n  }\n\n  // Blog methods\n  async getBlogPosts(): Promise<BlogPost[]> {\n    return await db\n      .select()\n      .from(blogPosts)\n      .orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getPublishedBlogPosts(): Promise<BlogPost[]> {\n    return await db\n      .select()\n      .from(blogPosts)\n      .where(eq(blogPosts.published, true))\n      .orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.slug, slug));\n    return post || undefined;\n  }\n\n  async createBlogPost(insertPost: InsertBlogPost): Promise<BlogPost> {\n    const [post] = await db\n      .insert(blogPosts)\n      .values(insertPost)\n      .returning();\n    return post;\n  }\n\n  // Portfolio methods\n  async getPortfolioItems(): Promise<PortfolioItem[]> {\n    return await db\n      .select()\n      .from(portfolioItems)\n      .orderBy(desc(portfolioItems.createdAt));\n  }\n\n  async getPublishedPortfolioItems(): Promise<PortfolioItem[]> {\n    return await db\n      .select()\n      .from(portfolioItems)\n      .where(eq(portfolioItems.published, true))\n      .orderBy(desc(portfolioItems.createdAt));\n  }\n\n  async getFeaturedPortfolioItems(): Promise<PortfolioItem[]> {\n    return await db\n      .select()\n      .from(portfolioItems)\n      .where(eq(portfolioItems.featured, true))\n      .orderBy(desc(portfolioItems.createdAt));\n  }\n\n  async getPortfolioItemById(id: number): Promise<PortfolioItem | undefined> {\n    const [item] = await db.select().from(portfolioItems).where(eq(portfolioItems.id, id));\n    return item || undefined;\n  }\n\n  async createPortfolioItem(insertItem: InsertPortfolioItem): Promise<PortfolioItem> {\n    const [item] = await db\n      .insert(portfolioItems)\n      .values(insertItem)\n      .returning();\n    return item;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4180},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  services: text(\"services\").array().notNull().default([]),\n  projectType: text(\"project_type\").notNull(),\n  location: text(\"location\").notNull(),\n  projectDetails: text(\"project_details\").notNull(),\n  timeline: text(\"timeline\"),\n  budgetRange: text(\"budget_range\"),\n  referenceFiles: text(\"reference_files\").array().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\").notNull(),\n  featuredImage: text(\"featured_image\"),\n  tags: text(\"tags\").array().default([]),\n  published: boolean(\"published\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const portfolioItems = pgTable(\"portfolio_items\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  sketchfabModelId: text(\"sketchfab_model_id\"),\n  modelFile: text(\"model_file\"), // Local 3D model file path (GLB, GLTF, OBJ)\n  modelFormat: text(\"model_format\"), // File format: 'glb', 'gltf', 'obj'\n  videoFile: text(\"video_file\"), // Video demonstration/walkthrough file path\n  videoFormat: text(\"video_format\"), // Video format: 'mp4', 'webm', 'mov'\n  category: text(\"category\").notNull(),\n  tools: text(\"tools\").array().default([]),\n  services: text(\"services\").array().default([]),\n  featuredImage: text(\"featured_image\"),\n  images: text(\"images\").array().default([]),\n  published: boolean(\"published\").default(false),\n  featured: boolean(\"featured\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertContactSubmissionSchema = createInsertSchema(contactSubmissions).pick({\n  name: true,\n  email: true,\n  services: true,\n  projectType: true,\n  location: true,\n  projectDetails: true,\n  timeline: true,\n  budgetRange: true,\n  referenceFiles: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).pick({\n  title: true,\n  slug: true,\n  content: true,\n  excerpt: true,\n  featuredImage: true,\n  tags: true,\n  published: true,\n});\n\nexport const insertPortfolioItemSchema = createInsertSchema(portfolioItems).pick({\n  title: true,\n  description: true,\n  sketchfabModelId: true,\n  modelFile: true,\n  modelFormat: true,\n  videoFile: true,\n  videoFormat: true,\n  category: true,\n  tools: true,\n  services: true,\n  featuredImage: true,\n  images: true,\n  published: true,\n  featured: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContactSubmission = z.infer<typeof insertContactSubmissionSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertPortfolioItem = z.infer<typeof insertPortfolioItemSchema>;\nexport type PortfolioItem = typeof portfolioItems.$inferSelect;\n","size_bytes":3751},"client/src/App.tsx":{"content":"import { useState, useEffect, lazy, Suspense } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport LoadingScreen from \"@/components/loading-screen\";\nimport Home from \"@/pages/home\";\n\n// Lazy load non-critical pages\nconst Gallery = lazy(() => import(\"@/pages/gallery\"));\nconst Blog = lazy(() => import(\"@/pages/blog\"));\nconst BlogPost = lazy(() => import(\"@/pages/blog-post\"));\nconst FAQ = lazy(() => import(\"@/pages/faq\"));\nconst NotFound = lazy(() => import(\"@/pages/not-found\"));\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/gallery\">\n        <Suspense fallback={<div className=\"min-h-screen bg-[hsl(218,11%,15%)] flex items-center justify-center\"><div className=\"text-white\">Loading...</div></div>}>\n          <Gallery />\n        </Suspense>\n      </Route>\n      <Route path=\"/blog\">\n        <Suspense fallback={<div className=\"min-h-screen bg-[hsl(218,11%,15%)] flex items-center justify-center\"><div className=\"text-white\">Loading...</div></div>}>\n          <Blog />\n        </Suspense>\n      </Route>\n      <Route path=\"/blog/:slug\">\n        <Suspense fallback={<div className=\"min-h-screen bg-[hsl(218,11%,15%)] flex items-center justify-center\"><div className=\"text-white\">Loading...</div></div>}>\n          <BlogPost />\n        </Suspense>\n      </Route>\n      <Route path=\"/faq\">\n        <Suspense fallback={<div className=\"min-h-screen bg-[hsl(218,11%,15%)] flex items-center justify-center\"><div className=\"text-white\">Loading...</div></div>}>\n          <FAQ />\n        </Suspense>\n      </Route>\n      <Route>\n        <Suspense fallback={<div className=\"min-h-screen bg-[hsl(218,11%,15%)] flex items-center justify-center\"><div className=\"text-white\">Loading...</div></div>}>\n          <NotFound />\n        </Suspense>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if app is actually ready instead of arbitrary delay\n    const checkReady = async () => {\n      // Wait for critical resources to load\n      await Promise.all([\n        // Wait for fonts to load\n        document.fonts.ready,\n        // Wait for DOM to be ready\n        new Promise(resolve => {\n          if (document.readyState === 'complete') {\n            resolve(true);\n          } else {\n            window.addEventListener('load', resolve);\n          }\n        })\n      ]);\n      \n      // Minimal delay to show the loading screen briefly\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 500);\n    };\n\n    checkReady();\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <LoadingScreen \n          isLoading={isLoading} \n          onLoadingComplete={() => setIsLoading(false)} \n        />\n        {!isLoading && (\n          <>\n            <Toaster />\n            <Router />\n          </>\n        )}\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3209},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --primary: hsl(240, 9%, 83.9%);\n  --primary-foreground: hsl(240, 5.9%, 10%);\n  --secondary: hsl(240, 4.8%, 95.9%);\n  --secondary-foreground: hsl(240, 5.9%, 10%);\n  --accent: hsl(240, 4.8%, 95.9%);\n  --accent-foreground: hsl(240, 5.9%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 10%, 3.9%);\n  --radius: 0.5rem;\n\n  /* Logo-complementary color palette */\n  --concrete: hsl(220, 9%, 46%);\n  --primary-blue: hsl(210, 85%, 50%);\n  --logo-blue: hsl(210, 100%, 60%);\n  --navy-blue: hsl(218, 85%, 25%);\n  --accent-blue: hsl(199, 89%, 48%);\n  --tech-orange: hsl(24, 95%, 53%);\n  --dark-gray: hsl(218, 11%, 15%);\n  --light-gray: hsl(220, 14%, 96%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(0, 0%, 98%);\n  --primary-foreground: hsl(240, 5.9%, 10%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    padding-top: 64px; /* Account for fixed navbar */\n  }\n}\n\n/* Custom animations */\n/* Scanline animation disabled */\n@keyframes scanline {\n  0%, 100% { transform: translateX(-100%); opacity: 0; }\n  50% { transform: translateX(100%); opacity: 0; }\n}\n\n/* Flip card animations */\n.flip-card-container {\n  perspective: 1000px;\n}\n\n.flip-card-inner {\n  transform-style: preserve-3d;\n  transition: transform 0.6s ease-in-out;\n}\n\n.flip-card-container:hover .flip-card-inner {\n  transform: rotateY(180deg) scale(1.05);\n}\n\n/* Responsive adjustments for horizontal layout */\n@media (max-width: 768px) {\n  .flip-card-container {\n    height: 160px;\n  }\n}\n\n.flip-card-front,\n.flip-card-back {\n  backface-visibility: hidden;\n}\n\n.flip-card-back {\n  transform: rotateY(180deg);\n}\n\n/* Dynamic glow effects */\n.flip-card-container:hover .flip-card-front {\n  box-shadow: 0 0 20px var(--glow-color, #ff6600);\n}\n\n/* Utility classes for 3D transforms */\n.perspective-1000 {\n  perspective: 1000px;\n}\n\n.transform-style-preserve-3d {\n  transform-style: preserve-3d;\n}\n\n.backface-hidden {\n  backface-visibility: hidden;\n}\n\n.rotate-y-180 {\n  transform: rotateY(180deg);\n}\n\n/* Loading Screen Animations */\n.grid-animation {\n  background-image: \n    linear-gradient(rgba(0, 170, 255, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(0, 170, 255, 0.1) 1px, transparent 1px);\n  background-size: 50px 50px;\n  animation: grid-move 20s linear infinite;\n  width: 100%;\n  height: 100%;\n}\n\n@keyframes grid-move {\n  0% { transform: translate(0, 0); }\n  100% { transform: translate(50px, 50px); }\n}\n\n.drone-container {\n  perspective: 1000px;\n  transform-style: preserve-3d;\n}\n\n.drone-svg {\n  filter: drop-shadow(0 0 20px rgba(0, 170, 255, 0.3));\n}\n\n.particles-container {\n  overflow: hidden;\n}\n\n@keyframes flicker {\n  0%, 100% { opacity: 0.8; }\n  50% { opacity: 1; }\n}\n\n@keyframes grid-pulse {\n  0%, 100% { opacity: 0.1; }\n  50% { opacity: 0.3; }\n}\n\n@keyframes location-glow {\n  0%, 100% { \n    opacity: 0.3; \n    transform: scale(1);\n  }\n  50% { \n    opacity: 0.6; \n    transform: scale(1.1);\n  }\n}\n\n/* Utility classes */\n.grid-overlay {\n  background-image: \n    linear-gradient(rgba(107, 114, 128, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(107, 114, 128, 0.1) 1px, transparent 1px);\n  background-size: 50px 50px;\n  animation: grid-pulse 4s ease-in-out infinite;\n}\n\n/* Scanline effect disabled */\n.scanline-effect {\n  position: relative;\n  overflow: hidden;\n}\n\n.scanline-effect::before {\n  display: none !important;\n}\n\n.tech-glow {\n  box-shadow: 0 0 20px rgba(14, 165, 233, 0.3);\n}\n\n.flip-card {\n  perspective: 1000px;\n}\n\n.flip-card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n}\n\n.flip-card:hover .flip-card-inner {\n  transform: rotateY(180deg);\n}\n\n.flip-card-front, .flip-card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  border-radius: 0.75rem;\n}\n\n.flip-card-back {\n  transform: rotateY(180deg);\n}\n\n/* Typography for tech aesthetic */\n.tech-mono {\n  font-family: 'JetBrains Mono', monospace;\n}\n\n/* Custom gradient utilities */\n.bg-gradient-radial {\n  background: radial-gradient(circle, var(--tw-gradient-stops));\n}\n","size_bytes":5238},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/about-section.tsx":{"content":"import { MapPin, Award, Settings, Info, CheckCircle } from \"lucide-react\";\nimport { useState } from \"react\";\nimport profileImage from \"@assets/2025-07-15_10.39.28_1752594500456.png\";\n\ninterface TechTagProps {\n  name: string;\n  tooltip: string;\n}\n\nfunction TechTag({ name, tooltip }: TechTagProps) {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  return (\n    <div \n      className=\"relative inline-block\"\n      onMouseEnter={() => setShowTooltip(true)}\n      onMouseLeave={() => setShowTooltip(false)}\n    >\n      <span className=\"inline-flex items-center px-3 py-1 bg-gray-700 hover:bg-gray-600 text-[hsl(158,64%,52%)] rounded-md text-sm cursor-pointer transition-colors border border-gray-600 hover:border-[hsl(158,64%,52%)]\">\n        <CheckCircle className=\"w-3 h-3 mr-1\" />\n        {name}\n      </span>\n      {showTooltip && (\n        <div className=\"absolute z-10 bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg shadow-lg border border-gray-600 whitespace-nowrap\">\n          {tooltip}\n          <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function AboutSection() {\n  return (\n    <section id=\"about\" className=\"py-20 bg-gray-900\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div>\n            <h2 className=\"text-4xl font-bold mb-6\">\n              Meet the <span className=\"text-[hsl(24,95%,53%)]\">Scanner</span>\n            </h2>\n            \n            {/* Punchy Opening Line */}\n            <div className=\"mb-6\">\n              <p className=\"text-xl font-semibold text-[hsl(24,95%,53%)] mb-4\">\n                From farm foundations to digital replicas—bringing real-world sites into stunning 3D.\n              </p>\n            </div>\n\n            {/* Matthew Byrd Quote Integration */}\n            <div className=\"bg-gray-800 border-l-4 border-[hsl(158,64%,52%)] p-4 mb-6 rounded-r-lg\">\n              <blockquote className=\"text-gray-300 italic mb-2\">\n                \"The great thing about reality capturing is you can combine the data that is captured by multiple technology types into one model.\"\n              </blockquote>\n              <p className=\"text-sm text-gray-400\">— Matthew Byrd, Nexus 3D Consulting</p>\n            </div>\n\n            <p className=\"text-gray-400 mb-6\">\n              I'm <span className=\"text-[hsl(199,89%,48%)] font-semibold\">Chandler Hopkins</span>, founder of Six1Five Studio. With a background rooted in construction, agriculture, and AEC tech, I specialize in bringing physical sites into high-precision 3D models using drones, LiDAR, and photogrammetry. I began my journey studying Construction Management at MTSU and built my skills hands-on — from logistics yards to field operations.\n            </p>\n            <p className=\"text-gray-400 mb-6\">\n              My practical experience gives me deep insight into site conditions, project workflows, and the realities that make Reality Capture essential for modern project execution, digital twins, and preservation.\n            </p>\n\n            {/* Interactive Tech Tags */}\n            <div className=\"mb-6\">\n              <h4 className=\"font-semibold text-[hsl(199,89%,48%)] mb-3\">Core Technologies</h4>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <TechTag \n                  name=\"RealityCapture\" \n                  tooltip=\"Photogrammetry tool for high-resolution 3D reconstruction\" \n                />\n                <TechTag \n                  name=\"Metashape\" \n                  tooltip=\"Professional photogrammetry software for aerial and terrestrial mapping\" \n                />\n                <TechTag \n                  name=\"CloudCompare\" \n                  tooltip=\"Point-cloud editing and comparison tool for LiDAR and photogrammetry data\" \n                />\n                <TechTag \n                  name=\"FARO SCENE\" \n                  tooltip=\"3D point cloud processing software for LiDAR scanning workflows\" \n                />\n                <TechTag \n                  name=\"LiDAR Scanning\" \n                  tooltip=\"Laser-based method for capturing precise spatial data and measurements\" \n                />\n                <TechTag \n                  name=\"NeRFs\" \n                  tooltip=\"Neural Radiance Fields for AI-powered 3D scene reconstruction\" \n                />\n                <TechTag \n                  name=\"Gaussian Splatting\" \n                  tooltip=\"Advanced 3D rendering technique for photorealistic scene representation\" \n                />\n              </div>\n            </div>\n\n            {/* Service Area with Enhanced Tennessee Background */}\n            <div className=\"relative overflow-visible pt-2 pb-2\">\n              {/* Tennessee state outline background - enhanced visibility */}\n              <div className=\"absolute -left-6 -top-3 w-full max-w-full h-auto opacity-[0.14] pointer-events-none\">\n                <svg \n                  width=\"100%\" \n                  height=\"auto\" \n                  viewBox=\"0 0 400 64\" \n                  fill=\"none\" \n                  className=\"w-full h-auto text-[hsl(28,100%,58%)] drop-shadow-sm\"\n                  style={{ aspectRatio: '6.25/1', objectFit: 'contain', maxWidth: '100%' }}\n                >\n                  {/* Full Tennessee state outline - horizontal orientation with enhanced stroke */}\n                  <path \n                    d=\"M20 32 L30 18 Q40 12, 55 16 L75 14 Q95 10, 115 14 L135 12 Q155 8, 175 12 L195 10 Q215 6, 235 10 L255 12 Q275 16, 295 20 L315 24 Q335 28, 350 32 Q360 40, 355 48 L345 52 Q325 56, 305 52 L285 54 Q265 58, 245 54 L225 56 Q205 60, 185 56 L165 58 Q145 62, 125 58 L105 56 Q85 52, 65 48 L45 44 Q25 40, 20 32 Z\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"1.2\" \n                    fill=\"none\" \n                    strokeDasharray=\"6,4\"\n                    filter=\"drop-shadow(0 0 2px rgba(255, 133, 27, 0.3))\"\n                  />\n                </svg>\n              </div>\n              \n              {/* Foreground content with enhanced glowing location pin */}\n              <div className=\"relative z-10 flex items-center space-x-3 text-[hsl(24,95%,53%)] font-semibold\">\n                <div className=\"relative\">\n                  {/* Enhanced glowing effect with blur */}\n                  <div \n                    className=\"absolute inset-0 w-5 h-5 bg-[hsl(24,95%,53%)] rounded-full blur-sm\" \n                    style={{\n                      animation: 'location-glow 2s ease-in-out infinite'\n                    }}\n                  ></div>\n                  {/* Secondary glow layer */}\n                  <div \n                    className=\"absolute inset-0 w-5 h-5 bg-[hsl(24,95%,53%)] rounded-full opacity-40\" \n                    style={{\n                      animation: 'location-glow 2s ease-in-out infinite 0.5s'\n                    }}\n                  ></div>\n                  {/* Location pin with enhanced shadow */}\n                  <MapPin className=\"relative w-5 h-5 drop-shadow-lg filter drop-shadow-[0_0_8px_rgba(255,133,27,0.4)]\" />\n                </div>\n                \n                {/* Service area text with maintained branding */}\n                <span className=\"relative z-10\">Service Area: Nashville Region</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"relative max-w-xs sm:max-w-sm mx-auto lg:mx-0\">\n            <div className=\"bg-[#111827] rounded-xl p-6 shadow-2xl\">\n              {/* Profile image with minimal dark frame */}\n              <div className=\"relative bg-[#1f2937] p-1 rounded-xl shadow-inner max-w-xs w-full mx-auto\">\n                <div className=\"rounded-xl overflow-hidden group transition-all duration-300 ease-in-out hover:scale-105 cursor-pointer\">\n                  <div className=\"relative aspect-square\">\n                    <img \n                      src={profileImage}\n                      alt=\"Chandler Hopkins, Founder of Six1Five Studio\" \n                      className=\"w-full h-full object-cover object-top rounded-xl\" \n                    />\n                    {/* Soft radial vignette overlay */}\n                    <div className=\"absolute inset-0 rounded-xl bg-gradient-radial from-transparent via-transparent to-black/30 pointer-events-none\"></div>\n                  </div>\n                  {/* Inner glow effect */}\n                  <div className=\"absolute inset-0 rounded-xl shadow-inner shadow-white/10 pointer-events-none\"></div>\n                </div>\n              </div>\n              \n              {/* Profile information and links */}\n              <div className=\"mt-6 text-center space-y-2\">\n                <h4 className=\"font-semibold text-white text-lg\">Chandler Hopkins</h4>\n                <p className=\"text-sm text-gray-400\">Founder & Reality Capture Specialist</p>\n                \n                {/* Action links */}\n                <div className=\"flex flex-col gap-2 mt-4 pt-2\">\n                  <a \n                    href=\"https://www.linkedin.com/in/chandler-hopkins-924005112/\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-sky-400 hover:text-white transition-colors text-sm font-medium\"\n                  >\n                    Connect on LinkedIn →\n                  </a>\n                  <a \n                    href=\"https://digitalblueprint.substack.com/\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-cyan-400 hover:text-white transition-colors text-sm font-medium\"\n                  >\n                    Read Digital Blueprint →\n                  </a>\n                  <a \n                    href=\"/resume.html\" \n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-orange-400 hover:text-white transition-colors text-sm font-bold\"\n                  >\n                    My Resume\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10378},"client/src/components/ai-workflow-showcase.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Play, Eye, Download, ExternalLink, Layers, Box, Zap } from \"lucide-react\";\n\n// Import the uploaded images\nimport houseRender1 from \"@assets/2025-07-24_10.17.03_1753534885802.png\";\nimport houseRender2 from \"@assets/2025-07-24_10.17.33_1753534885815.png\";\nimport houseRender3 from \"@assets/2025-07-24_10.17.22_1753534885818.png\";\nimport segmentationUI from \"@assets/2025-07-24_10.25.14_1753534885819.png\";\nimport houseKit from \"@assets/Realistic House Kit Screenshot_1753534885821.webp\";\n\ninterface WorkflowStep {\n  id: string;\n  title: string;\n  description: string;\n  image: string;\n  caption: string;\n  icon: React.ComponentType<any>;\n}\n\nconst workflowSteps: WorkflowStep[] = [\n  {\n    id: \"input\",\n    title: \"Realistic Inputs\",\n    description: \"High-quality architectural renders or photo references serve as the foundation for 3D reconstruction.\",\n    image: houseRender1,\n    caption: \"Client-provided architectural renders\",\n    icon: Eye\n  },\n  {\n    id: \"segmentation\", \n    title: \"AI Segmentation Workflow\",\n    description: \"Advanced AI algorithms segment building components, merge regions, and create bounding boxes for precise mesh generation.\",\n    image: segmentationUI,\n    caption: \"Interactive segmentation interface with merged regions and exploded view analysis\",\n    icon: Layers\n  },\n  {\n    id: \"reconstruction\",\n    title: \"3D Gaussian Reconstruction\", \n    description: \"Transform segmented 2D components into dense 3D Gaussian representations with component separation.\",\n    image: houseRender2,\n    caption: \"Combined 3D Gaussians with component-based architecture\",\n    icon: Box\n  },\n  {\n    id: \"assets\",\n    title: \"Modular 3D Assets\",\n    description: \"Generate reusable building component kits for virtual environments, games, and architectural simulations.\",\n    image: houseKit,\n    caption: \"Reusable house parts kit for scalable production workflows\",\n    icon: Zap\n  }\n];\n\nexport default function AIWorkflowShowcase() {\n  const [activeStep, setActiveStep] = useState(\"input\");\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const handlePlayDemo = () => {\n    setIsPlaying(true);\n    // Cycle through steps automatically\n    const steps = [\"input\", \"segmentation\", \"reconstruction\", \"assets\"];\n    let currentIndex = 0;\n    \n    const interval = setInterval(() => {\n      currentIndex = (currentIndex + 1) % steps.length;\n      setActiveStep(steps[currentIndex]);\n      \n      if (currentIndex === 0) {\n        setIsPlaying(false);\n        clearInterval(interval);\n      }\n    }, 2500);\n  };\n\n  return (\n    <section className=\"py-20 bg-[hsl(218,11%,15%)]\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <Badge className=\"mb-4 bg-[hsl(199,89%,48%)] text-white\">AI-Powered Workflow</Badge>\n          <h2 className=\"text-4xl font-bold mb-6\">\n            2D to <span className=\"text-[hsl(199,89%,48%)]\">3D Gaussian</span> Transformation\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed\">\n            Revolutionary AI workflow that transforms architectural renders into modular 3D assets using advanced segmentation and Gaussian reconstruction technology.\n          </p>\n          \n          <div className=\"mt-8 flex flex-wrap justify-center gap-4\">\n            <Button \n              onClick={handlePlayDemo}\n              disabled={isPlaying}\n              className=\"bg-[hsl(199,89%,48%)] hover:bg-[hsl(199,89%,43%)] text-white px-6 py-3\"\n            >\n              <Play className=\"w-4 h-4 mr-2\" />\n              {isPlaying ? \"Playing Demo...\" : \"Play Workflow Demo\"}\n            </Button>\n            <Button variant=\"outline\" className=\"text-white border-gray-600 hover:bg-gray-800\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download Sample Assets\n            </Button>\n          </div>\n        </div>\n\n        {/* Interactive Workflow */}\n        <Tabs value={activeStep} onValueChange={setActiveStep} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-gray-800 mb-8\">\n            {workflowSteps.map((step, index) => {\n              const IconComponent = step.icon;\n              return (\n                <TabsTrigger \n                  key={step.id} \n                  value={step.id}\n                  className=\"flex flex-col items-center gap-2 py-4 text-xs sm:text-sm data-[state=active]:bg-[hsl(199,89%,48%)] data-[state=active]:text-white\"\n                >\n                  <IconComponent className=\"w-5 h-5\" />\n                  <span className=\"hidden sm:block\">{step.title}</span>\n                  <span className=\"sm:hidden\">{index + 1}</span>\n                </TabsTrigger>\n              );\n            })}\n          </TabsList>\n\n          {workflowSteps.map((step) => (\n            <TabsContent key={step.id} value={step.id}>\n              <Card className=\"bg-[#1e1e1e] border-gray-700 overflow-hidden\">\n                <div className=\"grid lg:grid-cols-2 gap-0\">\n                  {/* Image Section */}\n                  <div className=\"relative\">\n                    <img \n                      src={step.image} \n                      alt={step.title}\n                      className=\"w-full h-64 lg:h-96 object-cover\"\n                    />\n                    <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4\">\n                      <p className=\"text-white text-sm font-medium\">{step.caption}</p>\n                    </div>\n                  </div>\n                  \n                  {/* Content Section */}\n                  <div className=\"p-8 flex flex-col justify-center\">\n                    <CardHeader className=\"p-0 mb-6\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <step.icon className=\"w-8 h-8 text-[hsl(199,89%,48%)]\" />\n                        <CardTitle className=\"text-2xl text-white\">{step.title}</CardTitle>\n                      </div>\n                      <CardDescription className=\"text-gray-300 text-lg leading-relaxed\">\n                        {step.description}\n                      </CardDescription>\n                    </CardHeader>\n                    \n                    <CardContent className=\"p-0\">\n                      {step.id === \"input\" && (\n                        <div className=\"space-y-4\">\n                          <h4 className=\"text-white font-semibold\">Input Requirements:</h4>\n                          <ul className=\"text-gray-300 space-y-2\">\n                            <li>• High-resolution architectural renders (4K+ recommended)</li>\n                            <li>• Multiple viewing angles for comprehensive coverage</li>\n                            <li>• Clear building component separation</li>\n                            <li>• Consistent lighting and material definition</li>\n                          </ul>\n                        </div>\n                      )}\n                      \n                      {step.id === \"segmentation\" && (\n                        <div className=\"space-y-4\">\n                          <h4 className=\"text-white font-semibold\">AI Processing Features:</h4>\n                          <ul className=\"text-gray-300 space-y-2\">\n                            <li>• Intelligent component recognition</li>\n                            <li>• Automated region merging</li>\n                            <li>• Bounding box generation</li>\n                            <li>• Material classification & separation</li>\n                          </ul>\n                          <button className=\"mt-4 text-[hsl(199,89%,48%)] hover:text-white text-sm font-medium transition-colors\">\n                            Learn about AI segmentation →\n                          </button>\n                        </div>\n                      )}\n\n                      {step.id === \"reconstruction\" && (\n                        <div className=\"space-y-4\">\n                          <h4 className=\"text-white font-semibold\">3D Gaussian Benefits:</h4>\n                          <ul className=\"text-gray-300 space-y-2\">\n                            <li>• Real-time rendering optimization</li>\n                            <li>• Photorealistic quality output</li>\n                            <li>• Component-based architecture</li>\n                            <li>• Scalable for large environments</li>\n                          </ul>\n                          <button className=\"mt-4 text-[hsl(199,89%,48%)] hover:text-white text-sm font-medium transition-colors\">\n                            See reconstruction examples →\n                          </button>\n                        </div>\n                      )}\n\n                      {step.id === \"assets\" && (\n                        <div className=\"space-y-4\">\n                          <h4 className=\"text-white font-semibold\">Asset Applications:</h4>\n                          <ul className=\"text-gray-300 space-y-2\">\n                            <li>• Game development environments</li>\n                            <li>• Architectural visualization</li>\n                            <li>• VR/AR experiences</li>\n                            <li>• Simulation & training platforms</li>\n                          </ul>\n                          <button className=\"mt-4 text-[hsl(199,89%,48%)] hover:text-white text-sm font-medium transition-colors\">\n                            Download sample assets →\n                          </button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </div>\n                </div>\n              </Card>\n            </TabsContent>\n          ))}\n        </Tabs>\n\n        {/* Technical Specifications */}\n        <div className=\"mt-16 grid md:grid-cols-3 gap-8\">\n          <Card className=\"bg-[#1e1e1e] border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Layers className=\"w-5 h-5 text-[hsl(199,89%,48%)]\" />\n                AI Technology\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-gray-300 space-y-2 text-sm\">\n                <li>• Advanced semantic segmentation</li>\n                <li>• Neural radiance field processing</li>\n                <li>• Gaussian splatting algorithms</li>\n                <li>• Real-time component analysis</li>\n              </ul>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#1e1e1e] border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Box className=\"w-5 h-5 text-[hsl(158,64%,52%)]\" />\n                Output Quality\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-gray-300 space-y-2 text-sm\">\n                <li>• High-fidelity 3D reconstruction</li>\n                <li>• Photorealistic texture mapping</li>\n                <li>• Optimized polygon counts</li>\n                <li>• Industry-standard file formats</li>\n              </ul>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-[#1e1e1e] border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-[hsl(24,95%,53%)]\" />\n                Workflow Benefits\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-gray-300 space-y-2 text-sm\">\n                <li>• 90% faster than traditional modeling</li>\n                <li>• Automated component separation</li>\n                <li>• Scalable production pipeline</li>\n                <li>• Consistent quality output</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"mt-16 text-center\">\n          <Card className=\"bg-gradient-to-r from-[hsl(199,89%,48%)] to-[hsl(158,64%,52%)] border-0 max-w-2xl mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-white text-2xl\">Ready to Transform Your Renders?</CardTitle>\n              <CardDescription className=\"text-white/90 text-lg\">\n                Get started with AI-powered 3D reconstruction for your architectural projects\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap justify-center gap-4\">\n                <Button className=\"bg-white text-[hsl(199,89%,48%)] hover:bg-gray-100\">\n                  Request Demo Project\n                </Button>\n                <Button variant=\"outline\" className=\"text-white border-white hover:bg-white/10\">\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  View Technical Details\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":13455},"client/src/components/contact-section.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Phone, Mail, MapPin, Upload, X } from \"lucide-react\";\n\nconst contactSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  services: z.array(z.string()).min(1, \"Please select at least one service\"),\n  projectType: z.string().min(1, \"Please select a project type\"),\n  location: z.string().min(1, \"Location is required for service area verification\"),\n  projectDetails: z.string().min(10, \"Please provide project details (minimum 10 characters)\"),\n  timeline: z.string().optional(),\n  budgetRange: z.string().optional(),\n  referenceFiles: z.array(z.string()).optional(),\n});\n\ntype ContactForm = z.infer<typeof contactSchema>;\n\nconst serviceOptions = [\n  { id: \"drone-mapping\", label: \"Drone Mapping\" },\n  { id: \"interior-scan\", label: \"Interior Scan\" },\n  { id: \"lidar-survey\", label: \"LiDAR Survey\" },\n  { id: \"construction-monitoring\", label: \"Construction Monitoring\" },\n  { id: \"photogrammetry\", label: \"Photogrammetry\" },\n  { id: \"heritage-documentation\", label: \"Heritage Documentation\" },\n];\n\nconst projectTypeOptions = [\n  { value: \"drone-mapping\", label: \"Drone Mapping\" },\n  { value: \"heritage\", label: \"Heritage Documentation\" },\n  { value: \"bim\", label: \"BIM/Construction\" },\n  { value: \"real-estate\", label: \"Real Estate\" },\n  { value: \"inspection\", label: \"Inspection/Survey\" },\n  { value: \"other\", label: \"Other\" },\n];\n\nconst timelineOptions = [\n  { value: \"asap\", label: \"ASAP (Rush)\" },\n  { value: \"1-2-weeks\", label: \"1-2 weeks\" },\n  { value: \"3-4-weeks\", label: \"3-4 weeks\" },\n  { value: \"1-2-months\", label: \"1-2 months\" },\n  { value: \"flexible\", label: \"Flexible timeline\" },\n];\n\nconst budgetOptions = [\n  { value: \"under-5k\", label: \"Under $5,000\" },\n  { value: \"5k-10k\", label: \"$5,000 - $10,000\" },\n  { value: \"10k-25k\", label: \"$10,000 - $25,000\" },\n  { value: \"25k-50k\", label: \"$25,000 - $50,000\" },\n  { value: \"over-50k\", label: \"Over $50,000\" },\n  { value: \"discuss\", label: \"Let's discuss\" },\n];\n\nexport default function ContactSection() {\n  const { toast } = useToast();\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  \n  const form = useForm<ContactForm>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      services: [],\n      projectType: \"\",\n      location: \"\",\n      projectDetails: \"\",\n      timeline: \"\",\n      budgetRange: \"\",\n      referenceFiles: [],\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactForm) => {\n      return await apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"Thank you for your interest. We will contact you soon.\",\n      });\n      form.reset();\n      setUploadedFiles([]);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    \n    const validFiles = files.filter(file => {\n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload images (JPEG, PNG, GIF), PDF, or text files only.\",\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      if (file.size > maxSize) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is too large. Please keep files under 10MB.`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      return true;\n    });\n\n    setUploadedFiles(prev => [...prev, ...validFiles]);\n    \n    // Convert files to base64 for form submission\n    const filePromises = validFiles.map(file => {\n      return new Promise<string>((resolve) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result as string);\n        reader.readAsDataURL(file);\n      });\n    });\n\n    Promise.all(filePromises).then(base64Files => {\n      form.setValue('referenceFiles', [...(form.getValues('referenceFiles') || []), ...base64Files]);\n    });\n  };\n\n  const removeFile = (index: number) => {\n    const newFiles = uploadedFiles.filter((_, i) => i !== index);\n    setUploadedFiles(newFiles);\n    \n    const currentFormFiles = form.getValues('referenceFiles') || [];\n    const newFormFiles = currentFormFiles.filter((_, i) => i !== index);\n    form.setValue('referenceFiles', newFormFiles);\n  };\n\n  const onSubmit = (data: ContactForm) => {\n    contactMutation.mutate(data);\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-12 md:py-20 bg-gray-900\">\n      <div className=\"max-w-6xl mx-auto px-6\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Let's capture your site in <span className=\"text-[var(--primary-blue)]\">3D</span>\n          </h2>\n          <p className=\"text-gray-400 max-w-2xl mx-auto\">\n            Ready to transform your project with Reality Capture technology? Get started with a custom quote.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-10 items-start\">\n          {/* Get Started Form */}\n          <div className=\"bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-700\">\n            <h3 className=\"text-2xl font-semibold mb-6\">Get Started</h3>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium\">Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Your name\"\n                          className=\"bg-gray-700 border-gray-600 focus:border-[hsl(24,95%,53%)] text-white\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium\">Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\"\n                          placeholder=\"your@email.com\"\n                          className=\"bg-gray-700 border-gray-600 focus:border-[hsl(24,95%,53%)] text-white\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"projectType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium\">Project Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-gray-700 border-gray-600 focus:border-[hsl(24,95%,53%)] text-white\">\n                            <SelectValue placeholder=\"Select project type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"bg-gray-700 border-gray-600\">\n                          {projectTypeOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value} className=\"text-white hover:bg-gray-600\">\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium\">Project Location</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"City, State (e.g., Nashville, TN)\"\n                          className=\"bg-gray-700 border-gray-600 focus:border-[hsl(24,95%,53%)] text-white\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"services\"\n                  render={() => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium mb-3 block\">Services Needed</FormLabel>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        {serviceOptions.map((service) => (\n                          <FormField\n                            key={service.id}\n                            control={form.control}\n                            name=\"services\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                                <FormControl>\n                                  <Checkbox\n                                    checked={field.value?.includes(service.id)}\n                                    onCheckedChange={(checked) => {\n                                      return checked\n                                        ? field.onChange([...field.value, service.id])\n                                        : field.onChange(\n                                            field.value?.filter((value) => value !== service.id)\n                                          );\n                                    }}\n                                    className=\"border-gray-600 data-[state=checked]:bg-[hsl(24,95%,53%)]\"\n                                  />\n                                </FormControl>\n                                <FormLabel className=\"text-sm font-normal cursor-pointer\">\n                                  {service.label}\n                                </FormLabel>\n                              </FormItem>\n                            )}\n                          />\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"projectDetails\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium\">Project Details</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Tell me about your project...\"\n                          className=\"bg-gray-700 border-gray-600 focus:border-[hsl(24,95%,53%)] h-32 text-white\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"timeline\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium\">Project Timeline</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"bg-gray-700 border-gray-600 focus:border-[hsl(24,95%,53%)] text-white\">\n                              <SelectValue placeholder=\"Select timeline\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {timelineOptions.map((option) => (\n                              <SelectItem key={option.value} value={option.value}>\n                                {option.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"budgetRange\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium\">Budget Range</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"bg-gray-700 border-gray-600 focus:border-[hsl(24,95%,53%)] text-white\">\n                              <SelectValue placeholder=\"Select budget\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {budgetOptions.map((option) => (\n                              <SelectItem key={option.value} value={option.value}>\n                                {option.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div>\n                  <FormLabel className=\"text-sm font-medium mb-3 block\">Reference Files</FormLabel>\n                  <div className=\"border-2 border-dashed border-gray-600 rounded-lg p-6 text-center\">\n                    <input\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*,.pdf,.txt\"\n                      onChange={handleFileUpload}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                    />\n                    <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                      <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-gray-400 mb-1\">Upload reference images or documents</p>\n                      <p className=\"text-xs text-gray-500\">Drag files here or click to browse (Max 10MB each)</p>\n                    </label>\n                  </div>\n                  \n                  {uploadedFiles.length > 0 && (\n                    <div className=\"mt-4 space-y-2\">\n                      {uploadedFiles.map((file, index) => (\n                        <div key={index} className=\"flex items-center justify-between bg-gray-700 rounded-lg p-3\">\n                          <span className=\"text-sm text-white truncate\">{file.name}</span>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeFile(index)}\n                            className=\"text-red-400 hover:text-red-300 h-6 w-6 p-0\"\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  disabled={contactMutation.isPending}\n                  className=\"w-full bg-[var(--primary-blue)] hover:bg-[var(--navy-blue)] text-white py-3 rounded-lg font-semibold transition-colors\"\n                >\n                  {contactMutation.isPending ? \"Sending...\" : \"Request Quote\"}\n                </Button>\n              </form>\n            </Form>\n          </div>\n          \n          {/* Contact Info Sidebar */}\n          <div className=\"bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-700\">\n            <h3 className=\"text-xl font-semibold mb-6\">Ready to Start?</h3>\n            <div className=\"space-y-4 text-gray-300\">\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"w-5 h-5 text-[hsl(24,95%,53%)]\" />\n                <div>\n                  <span className=\"font-semibold\">Call Direct:</span> (931) 588-8997\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Mail className=\"w-5 h-5 text-[hsl(199,89%,48%)]\" />\n                <div>\n                  <span className=\"font-semibold\">Email:</span> admin@six1fivestudio.com\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <MapPin className=\"w-5 h-5 text-[hsl(158,64%,52%)]\" />\n                <div>\n                  <span className=\"font-semibold\">Service Area:</span> Tennessee + Regional Coverage\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":18735},"client/src/components/final-cta-banner.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Calendar, MapPin, Clock } from \"lucide-react\";\n\nexport default function FinalCTABanner() {\n  const scrollToContact = () => {\n    const element = document.getElementById(\"contact\");\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <section className=\"py-16 bg-gradient-to-r from-[var(--primary-blue)] to-[var(--logo-blue)]\">\n      <div className=\"max-w-4xl mx-auto px-6 text-center\">\n        <h2 className=\"text-4xl font-bold text-white mb-6\">\n          Ready to capture your site?\n        </h2>\n        <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\n          Transform your project with professional reality capture technology. \n          Get precision 3D models, accurate measurements, and comprehensive documentation.\n        </p>\n        \n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          <div className=\"flex items-center justify-center text-white/90\">\n            <Clock className=\"w-5 h-5 mr-2\" />\n            <span className=\"text-sm font-medium\">Fast turnaround</span>\n          </div>\n          <div className=\"flex items-center justify-center text-white/90\">\n            <MapPin className=\"w-5 h-5 mr-2\" />\n            <span className=\"text-sm font-medium\">Tennessee service area</span>\n          </div>\n          <div className=\"flex items-center justify-center text-white/90\">\n            <Calendar className=\"w-5 h-5 mr-2\" />\n            <span className=\"text-sm font-medium\">Flexible scheduling</span>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button \n            onClick={scrollToContact}\n            className=\"bg-white text-[var(--primary-blue)] hover:bg-gray-100 px-8 py-3 text-lg font-semibold transition-colors\"\n          >\n            Book a scan now\n            <ArrowRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n          <Button \n            onClick={scrollToContact}\n            variant=\"outline\"\n            className=\"border-white text-white hover:bg-white hover:text-[var(--primary-blue)] px-8 py-3 text-lg font-semibold transition-colors\"\n          >\n            Get Free Quote\n          </Button>\n        </div>\n        \n        <p className=\"text-white/70 text-sm mt-4\">\n          Professional • Certified • Insured • Fast Delivery\n        </p>\n      </div>\n    </section>\n  );\n}","size_bytes":2453},"client/src/components/flip-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface ServiceData {\n  icon: LucideIcon;\n  title: string;\n  subtitle: string;\n  color: string;\n  bgColor: string;\n  workflow: string[];\n}\n\ninterface FlipCardProps {\n  service: ServiceData;\n}\n\nexport default function FlipCard({ service }: FlipCardProps) {\n  const IconComponent = service.icon;\n\n  return (\n    <div className=\"flip-card h-80 w-full\">\n      <div className=\"flip-card-inner\">\n        <div className=\"flip-card-front bg-gray-800 p-4 sm:p-6 lg:p-8 flex flex-col items-center justify-center\">\n          <IconComponent className={`w-12 h-12 sm:w-14 sm:h-14 lg:w-16 lg:h-16 ${service.color === 'drone-orange' ? 'text-[hsl(24,95%,53%)]' : service.color === 'sky-blue' ? 'text-[hsl(199,89%,48%)]' : 'text-[hsl(158,64%,52%)]'} mb-4 lg:mb-6`} />\n          <h3 className=\"text-lg sm:text-xl lg:text-2xl font-semibold mb-2 lg:mb-4 text-center leading-tight\">{service.title}</h3>\n          <p className=\"text-gray-400 text-center text-sm sm:text-base leading-tight\">{service.subtitle}</p>\n        </div>\n        <div className={`flip-card-back ${service.bgColor} p-4 sm:p-6 lg:p-8 text-center text-white flex flex-col justify-between`}>\n          <div>\n            <h3 className=\"text-lg sm:text-xl lg:text-2xl font-semibold mb-3 lg:mb-4\">\n              {service.title === \"Photogrammetry\" ? \"Pipeline\" : service.title === \"LiDAR Integration\" ? \"Tools\" : \"Workflow\"}\n            </h3>\n            <ul className=\"space-y-1 sm:space-y-2 text-left text-sm sm:text-base\">\n              {service.workflow.map((item, index) => (\n                <li key={index} className=\"leading-tight\">{item}</li>\n              ))}\n            </ul>\n          </div>\n          <Button className=\"mt-4 lg:mt-6 bg-white text-gray-900 hover:bg-gray-100 px-4 sm:px-6 py-2 rounded-lg font-semibold text-sm sm:text-base\">\n            Learn More\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1981},"client/src/components/footer.tsx":{"content":"import { Users, Globe, FileText } from \"lucide-react\";\nimport logoImage from \"@/assets/six1five-logo.png\";\nimport logoHorizontalWhite from \"@/assets/logo-horizontal-clean-bg.png\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-[hsl(218,11%,15%)] border-t border-gray-700 py-12\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-2\">\n            <div className=\"flex items-center mb-4\">\n              <img \n                src={logoHorizontalWhite} \n                alt=\"SixlFive Studio - Reality Capture Specialists\" \n                className=\"h-12 w-auto filter drop-shadow-lg\"\n                style={{\n                  filter: 'drop-shadow(0 0 8px var(--logo-blue))'\n                }}\n              />\n            </div>\n            <p className=\"text-gray-400 mb-4\">\n              Reality Capture specialists transforming physical spaces into digital assets for AEC, real estate, and historic preservation.\n            </p>\n            <div className=\"flex space-x-6\">\n              <a \n                href=\"https://www.linkedin.com/in/chandler-hopkins-924005112/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"group flex items-center space-x-2 text-gray-400 hover:text-[var(--primary-blue)] transition-all duration-300 transform hover:scale-110\"\n              >\n                <div className=\"p-2 rounded-full bg-gray-800 group-hover:bg-[var(--primary-blue)] transition-all duration-300\">\n                  <Users className=\"w-5 h-5\" />\n                </div>\n                <span className=\"text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300\">LinkedIn</span>\n              </a>\n              <a \n                href=\"https://sketchfab.com/six1fivemedia\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"group flex items-center space-x-2 text-gray-400 hover:text-[var(--logo-blue)] transition-all duration-300 transform hover:scale-110\"\n                title=\"View 3D Models on Sketchfab\"\n              >\n                <div className=\"p-2 rounded-full bg-gray-800 group-hover:bg-[var(--logo-blue)] transition-all duration-300\">\n                  <Globe className=\"w-5 h-5\" />\n                </div>\n                <span className=\"text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300\">3D Models</span>\n              </a>\n              <a \n                href=\"https://digitalblueprint.substack.com/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"group flex items-center space-x-2 text-gray-400 hover:text-[hsl(158,64%,52%)] transition-all duration-300 transform hover:scale-110\"\n                title=\"Digital Blueprint on Substack\"\n              >\n                <div className=\"p-2 rounded-full bg-gray-800 group-hover:bg-[hsl(158,64%,52%)] transition-all duration-300\">\n                  <FileText className=\"w-5 h-5\" />\n                </div>\n                <span className=\"text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300\">Newsletter</span>\n              </a>\n            </div>\n          </div>\n          <div>\n            <h4 className=\"font-semibold mb-4\">Services</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li><a href=\"#services\" className=\"hover:text-white transition-colors\">Drone Mapping</a></li>\n              <li><a href=\"#services\" className=\"hover:text-white transition-colors\">LiDAR Scanning</a></li>\n              <li><a href=\"#services\" className=\"hover:text-white transition-colors\">Photogrammetry</a></li>\n              <li><a href=\"#services\" className=\"hover:text-white transition-colors\">3D Reconstruction</a></li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-semibold mb-4\">Contact</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>Nashville, Tennessee</li>\n              <li>(931) 588-8997</li>\n              <li>admin@six1fivestudio.com</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-gray-400\">\n          <p>&copy; 2024 Six1Five Studio. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4420},"client/src/components/hero-section.tsx":{"content":"import { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport SketchfabViewer from \"./sketchfab-viewer\";\n\nexport default function HeroSection() {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  useEffect(() => {\n    // Animate hero text on mount\n    const animatedText = document.querySelector('.animated-text');\n    if (animatedText) {\n      animatedText.classList.add('animate-pulse');\n    }\n  }, []);\n\n  return (\n    <section id=\"home\" className=\"relative min-h-screen flex items-center justify-center pt-24 md:pt-16\">\n      {/* Semi-transparent gradient overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-[hsl(218,11%,15%)]/90 via-[hsl(218,11%,15%)]/50 to-[hsl(218,11%,15%)]/80 z-0\"></div>\n      <div className=\"container mx-auto px-4 sm:px-6 z-10\">\n        <div className=\"grid lg:grid-cols-2 gap-8 lg:gap-12 items-center\">\n          <div className=\"text-center lg:text-left px-2 sm:px-0\">\n            <h1 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-7xl font-bold mb-4 md:mb-6 leading-tight\">\n              <span className=\"text-[var(--primary-blue)]\">Scan</span> the World.\n              <br />\n              <span className=\"text-[var(--logo-blue)]\">Reconstruct</span> Reality.\n            </h1>\n            <p className=\"text-lg sm:text-xl text-gray-400 mb-3 md:mb-4 max-w-lg\">\n              Professional drone mapping and 3D scanning for construction, real estate, and preservation.\n            </p>\n            <p className=\"text-base sm:text-lg text-gray-300 mb-6 md:mb-8 max-w-lg\">\n              Drone mapping, LiDAR, photogrammetry — all captured with purpose.\n            </p>\n            <div className=\"animated-text mb-6 md:mb-8\">\n              <span className=\"text-lg sm:text-xl md:text-2xl font-mono text-[hsl(158,64%,52%)]\">\n                I turn real spaces into digital products.\n              </span>\n            </div>\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n              <Button \n                onClick={() => scrollToSection(\"portfolio\")}\n                className=\"bg-[var(--primary-blue)] hover:bg-[var(--navy-blue)] text-white px-6 py-4 sm:px-8 sm:py-3 rounded-lg font-semibold transition-colors w-full sm:w-auto\"\n              >\n                View Portfolio\n              </Button>\n              <Button \n                onClick={() => scrollToSection(\"contact\")}\n                variant=\"outline\"\n                className=\"border border-[var(--logo-blue)] text-[var(--logo-blue)] hover:bg-[var(--logo-blue)] hover:text-white px-6 py-4 sm:px-8 sm:py-3 rounded-lg font-semibold transition-colors w-full sm:w-auto\"\n              >\n                Book a Scan\n              </Button>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <SketchfabViewer />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3029},"client/src/components/loading-screen.tsx":{"content":"import { useEffect, useState } from 'react';\nimport logoImage from \"@/assets/six1five-logo.png\";\nimport logoCircular from \"@/assets/logo-circular-clean.png\";\n\ninterface LoadingScreenProps {\n  isLoading: boolean;\n  onLoadingComplete?: () => void;\n}\n\nexport default function LoadingScreen({ isLoading, onLoadingComplete }: LoadingScreenProps) {\n  const [progress, setProgress] = useState(0);\n  const [currentPhase, setCurrentPhase] = useState('Initializing Reality Capture...');\n\n  const phases = [\n    'Initializing Reality Capture...',\n    'Loading 3D Engine...',\n    'Preparing Drone Systems...',\n    'Calibrating Sensors...',\n    'Ready for Capture'\n  ];\n\n  useEffect(() => {\n    if (!isLoading) return;\n\n    const timer = setInterval(() => {\n      setProgress(prev => {\n        const newProgress = prev + Math.random() * 15 + 5;\n        \n        // Update phase based on progress\n        if (newProgress < 20) setCurrentPhase(phases[0]);\n        else if (newProgress < 40) setCurrentPhase(phases[1]);\n        else if (newProgress < 60) setCurrentPhase(phases[2]);\n        else if (newProgress < 80) setCurrentPhase(phases[3]);\n        else setCurrentPhase(phases[4]);\n\n        if (newProgress >= 100) {\n          clearInterval(timer);\n          setTimeout(() => {\n            onLoadingComplete?.();\n          }, 500);\n          return 100;\n        }\n        return newProgress;\n      });\n    }, 150);\n\n    return () => clearInterval(timer);\n  }, [isLoading, onLoadingComplete]);\n\n  if (!isLoading) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-[hsl(218,11%,15%)] flex items-center justify-center overflow-hidden\">\n      {/* Simple Content */}\n      <div className=\"text-center max-w-md mx-auto px-6\">\n        {/* Logo */}\n        <div className=\"flex flex-col items-center justify-center mb-6\">\n          <img \n            src={logoCircular} \n            alt=\"SixlFive Studio - Reality Capture Specialists\" \n            className=\"h-36 w-auto mb-4 transition-transform hover:scale-105\"\n          />\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-white\">Six1Five Studio</h1>\n            <p className=\"text-[var(--logo-blue)] text-sm font-medium\">Reality Capture Technology</p>\n          </div>\n        </div>\n\n        {/* Simple Loading Phase */}\n        <p className=\"text-white text-lg mb-6 font-medium\">\n          {currentPhase}\n        </p>\n\n        {/* Simple Progress Bar */}\n        <div className=\"relative w-full bg-gray-700 rounded-full h-2 mb-4 overflow-hidden\">\n          <div\n            className=\"h-full bg-gradient-to-r from-[var(--primary-blue)] to-[var(--logo-blue)] rounded-full transition-all duration-300 ease-out\"\n            style={{ width: `${progress}%` }}\n          />\n        </div>\n\n        {/* Progress Percentage */}\n        <p className=\"text-[var(--logo-blue)] text-sm font-mono\">\n          {Math.round(progress)}%\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":2957},"client/src/components/model-viewer.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three-stdlib';\nimport { OBJLoader } from 'three-stdlib';\nimport { MTLLoader } from 'three-stdlib';\nimport { OrbitControls } from 'three-stdlib';\nimport { Play, RotateCcw } from 'lucide-react';\n\ninterface ModelViewerProps {\n  modelFile: string;\n  modelFormat: 'glb' | 'gltf' | 'obj';\n  title: string;\n  className?: string;\n}\n\nexport function ModelViewer({ modelFile, modelFormat, title, className = '' }: ModelViewerProps) {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const controlsRef = useRef<OrbitControls | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x1a1a1a);\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      mountRef.current.clientWidth / mountRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.set(0, 5, 10);\n    cameraRef.current = camera;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.enableZoom = true;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n    controlsRef.current = controls;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 10, 5);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n\n    // Load model with proper format support\n    const loadModel = async () => {\n      try {\n        setLoading(true);\n        \n        if (modelFormat === 'glb' || modelFormat === 'gltf') {\n          const loader = new GLTFLoader();\n          loader.load(\n            modelFile,\n            (gltf) => {\n              const model = gltf.scene;\n              \n              // Center and scale the model\n              const box = new THREE.Box3().setFromObject(model);\n              const center = box.getCenter(new THREE.Vector3());\n              const size = box.getSize(new THREE.Vector3());\n              const maxDim = Math.max(size.x, size.y, size.z);\n              const scale = 4 / maxDim;\n              \n              model.position.sub(center);\n              model.scale.multiplyScalar(scale);\n              \n              scene.add(model);\n              setLoading(false);\n            },\n            (progress) => {\n              console.log('Loading progress:', (progress.loaded / progress.total) * 100 + '%');\n            },\n            (error) => {\n              console.error('Error loading GLTF model:', error);\n              setError('Failed to load 3D model');\n              setLoading(false);\n            }\n          );\n        } else if (modelFormat === 'obj') {\n          // Load materials first, then the OBJ model\n          const mtlFile = modelFile.replace('.obj', '.mtl');\n          const mtlLoader = new MTLLoader();\n          \n          mtlLoader.load(\n            mtlFile,\n            (materials) => {\n              materials.preload();\n              \n              const objLoader = new OBJLoader();\n              objLoader.setMaterials(materials);\n              \n              objLoader.load(\n                modelFile,\n                (obj) => {\n                  // Center and scale the model\n                  const box = new THREE.Box3().setFromObject(obj);\n                  const center = box.getCenter(new THREE.Vector3());\n                  const size = box.getSize(new THREE.Vector3());\n                  const maxDim = Math.max(size.x, size.y, size.z);\n                  const scale = 4 / maxDim;\n                  \n                  obj.position.sub(center);\n                  obj.scale.multiplyScalar(scale);\n                  \n                  scene.add(obj);\n                  setLoading(false);\n                },\n                (progress) => {\n                  console.log('Loading progress:', (progress.loaded / progress.total) * 100 + '%');\n                },\n                (error) => {\n                  console.error('Error loading OBJ model:', error);\n                  setError('Failed to load 3D model');\n                  setLoading(false);\n                }\n              );\n            },\n            (progress) => {\n              console.log('Loading MTL progress:', (progress.loaded / progress.total) * 100 + '%');\n            },\n            (error) => {\n              console.error('Error loading MTL materials:', error);\n              // Try loading OBJ without materials as fallback\n              const objLoader = new OBJLoader();\n              objLoader.load(\n                modelFile,\n                (obj) => {\n                  // Apply default material\n                  obj.traverse((child) => {\n                    if ((child as THREE.Mesh).isMesh) {\n                      (child as THREE.Mesh).material = new THREE.MeshPhongMaterial({ \n                        color: 0x999999,\n                        shininess: 30\n                      });\n                    }\n                  });\n                  \n                  // Center and scale the model\n                  const box = new THREE.Box3().setFromObject(obj);\n                  const center = box.getCenter(new THREE.Vector3());\n                  const size = box.getSize(new THREE.Vector3());\n                  const maxDim = Math.max(size.x, size.y, size.z);\n                  const scale = 4 / maxDim;\n                  \n                  obj.position.sub(center);\n                  obj.scale.multiplyScalar(scale);\n                  \n                  scene.add(obj);\n                  setLoading(false);\n                },\n                (progress) => {\n                  console.log('Loading progress:', (progress.loaded / progress.total) * 100 + '%');\n                },\n                (error) => {\n                  console.error('Error loading OBJ model:', error);\n                  setError('Failed to load 3D model');\n                  setLoading(false);\n                }\n              );\n            }\n          );\n        }\n      } catch (err) {\n        console.error('Model loading error:', err);\n        setError('Failed to load 3D model');\n        setLoading(false);\n      }\n    };\n\n    loadModel();\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      if (mountRef.current && camera && renderer) {\n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n        \n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [modelFile, modelFormat]);\n\n  const resetView = () => {\n    if (controlsRef.current && cameraRef.current) {\n      controlsRef.current.reset();\n      cameraRef.current.position.set(0, 5, 10);\n    }\n  };\n\n  const toggleAutoRotate = () => {\n    if (controlsRef.current) {\n      controlsRef.current.autoRotate = !controlsRef.current.autoRotate;\n    }\n  };\n\n  if (error) {\n    return (\n      <div className={`bg-gray-800 rounded-xl p-8 flex items-center justify-center ${className}`}>\n        <div className=\"text-center\">\n          <div className=\"text-red-400 mb-2\">⚠️</div>\n          <p className=\"text-gray-400\">Failed to load 3D model</p>\n          <p className=\"text-xs text-gray-500 mt-1\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-gray-800 rounded-xl overflow-hidden relative ${className}`}>\n      <div ref={mountRef} className=\"w-full h-64 relative\">\n        {loading && (\n          <div className=\"absolute inset-0 bg-gray-800 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mx-auto mb-2\"></div>\n              <p className=\"text-gray-400 text-sm\">Loading 3D model...</p>\n            </div>\n          </div>\n        )}\n        \n        {!loading && (\n          <div className=\"absolute top-2 right-2 z-10 flex gap-2\">\n            <button\n              onClick={toggleAutoRotate}\n              className=\"bg-black/60 hover:bg-black/80 text-white p-2 rounded-lg transition-colors\"\n              title=\"Toggle auto-rotate\"\n            >\n              <Play className=\"w-3 h-3\" />\n            </button>\n            <button\n              onClick={resetView}\n              className=\"bg-black/60 hover:bg-black/80 text-white p-2 rounded-lg transition-colors\"\n              title=\"Reset view\"\n            >\n              <RotateCcw className=\"w-3 h-3\" />\n            </button>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"absolute bottom-2 left-2 bg-black/60 text-white px-3 py-1 rounded-lg text-sm\">\n        Interactive 3D Model\n      </div>\n    </div>\n  );\n}","size_bytes":10063},"client/src/components/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport ThemeToggle from \"@/components/theme-toggle\";\nimport logoImage from \"@/assets/six1five-logo.png\";\nimport logoHorizontal from \"@/assets/logo-matrix-style.png\";\n\nexport default function Navbar() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [location] = useLocation();\n\n  const scrollToSection = (sectionId: string) => {\n    if (location !== \"/\") {\n      // Navigate to home first, then scroll\n      window.location.href = `/#${sectionId}`;\n      return;\n    }\n    \n    const element = document.getElementById(sectionId);\n    if (element) {\n      // Calculate offset dynamically based on actual navbar height\n      const nav = document.querySelector('nav');\n      const navHeight = nav?.getBoundingClientRect().height ?? 80;\n      const offsetTop = element.offsetTop - navHeight - 20;\n      window.scrollTo({\n        top: offsetTop,\n        behavior: \"smooth\"\n      });\n      setIsMenuOpen(false);\n    }\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-[hsl(218,11%,15%)]/95 backdrop-blur-sm border-b border-[hsl(220,9%,46%)]/20\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"flex items-center justify-between h-20 sm:h-24 md:h-28\">\n          <Link href=\"/\" className=\"flex items-center hover:opacity-80 transition-opacity\">\n            <img \n              src={logoHorizontal} \n              alt=\"Six1Five Studio - Reality Capture Specialists\" \n              className=\"h-16 sm:h-20 md:h-20 lg:h-24 xl:h-28 w-auto transition-transform hover:scale-105 rounded-lg shadow-lg\"\n            />\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <button \n              onClick={() => scrollToSection(\"home\")}\n              className=\"relative hover:text-[var(--primary-blue)] transition-colors\"\n            >\n              Home\n            </button>\n            <Link href=\"/gallery\" className=\"relative hover:text-[var(--primary-blue)] transition-colors\">\n              Gallery\n            </Link>\n            <button \n              onClick={() => scrollToSection(\"services\")}\n              className=\"relative hover:text-[var(--primary-blue)] transition-colors\"\n            >\n              Services\n            </button>\n            <button \n              onClick={() => scrollToSection(\"portfolio\")}\n              className=\"relative hover:text-[var(--primary-blue)] transition-colors\"\n            >\n              Portfolio\n            </button>\n            <Link href=\"/blog\" className=\"relative hover:text-[hsl(24,95%,53%)] transition-colors\">\n              Blog\n            </Link>\n            <Link href=\"/faq\" className=\"relative hover:text-[hsl(24,95%,53%)] transition-colors\">\n              FAQ\n            </Link>\n            <button \n              onClick={() => scrollToSection(\"contact\")}\n              className=\"relative hover:text-[var(--primary-blue)] transition-colors\"\n            >\n              Contact\n            </button>\n            <ThemeToggle />\n            <Button \n              onClick={() => scrollToSection(\"contact\")}\n              className=\"bg-[var(--primary-blue)] hover:bg-[var(--navy-blue)] text-white px-4 py-2 rounded-lg transition-colors\"\n            >\n              Book a Scan\n            </Button>\n          </div>\n          \n          <button \n            className=\"md:hidden\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n          >\n            {isMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n          </button>\n        </div>\n        \n        {/* Mobile menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-[hsl(220,9%,46%)]/20\">\n            <div className=\"flex flex-col space-y-4\">\n              <button \n                onClick={() => scrollToSection(\"home\")}\n                className=\"text-left hover:text-[var(--primary-blue)] transition-colors\"\n              >\n                Home\n              </button>\n              <Link \n                href=\"/gallery\" \n                className=\"text-left hover:text-[var(--primary-blue)] transition-colors\"\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Gallery\n              </Link>\n              <button \n                onClick={() => scrollToSection(\"services\")}\n                className=\"text-left hover:text-[var(--primary-blue)] transition-colors\"\n              >\n                Services\n              </button>\n              <button \n                onClick={() => scrollToSection(\"portfolio\")}\n                className=\"text-left hover:text-[var(--primary-blue)] transition-colors\"\n              >\n                Portfolio\n              </button>\n              <Link \n                href=\"/blog\" \n                className=\"text-left hover:text-[var(--primary-blue)] transition-colors\"\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Blog\n              </Link>\n              <Link \n                href=\"/faq\" \n                className=\"text-left hover:text-[var(--primary-blue)] transition-colors\"\n                onClick={() => setIsMenuOpen(false)}\n              >\n                FAQ\n              </Link>\n              <button \n                onClick={() => scrollToSection(\"contact\")}\n                className=\"text-left hover:text-[var(--primary-blue)] transition-colors\"\n              >\n                Contact\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5675},"client/src/components/portfolio-section.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Play, Layers, Building, ExternalLink, Eye, PlayCircle } from \"lucide-react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { ModelViewer } from \"./model-viewer\";\nimport OptimizedImage from \"./optimized-image\";\nimport type { PortfolioItem } from \"@shared/schema\";\n\nconst getIconForCategory = (category: string) => {\n  switch (category.toLowerCase()) {\n    case 'photogrammetry': return Play;\n    case 'construction': return Layers;\n    case 'heritage': \n    case 'interior': \n    default: return Building;\n  }\n};\n\nconst getColorForCategory = (category: string) => {\n  switch (category.toLowerCase()) {\n    case 'photogrammetry': return 'text-[hsl(24,95%,53%)]';\n    case 'construction': return 'text-[hsl(199,89%,48%)]';\n    case 'heritage':\n    case 'interior':\n    default: return 'text-[hsl(158,64%,52%)]';\n  }\n};\n\nconst getButtonColorForCategory = (category: string) => {\n  switch (category.toLowerCase()) {\n    case 'photogrammetry': return 'bg-[hsl(24,95%,53%)] hover:bg-[hsl(24,95%,48%)]';\n    case 'construction': return 'bg-[hsl(199,89%,48%)] hover:bg-[hsl(199,89%,43%)]';\n    case 'heritage':\n    case 'interior':\n    default: return 'bg-[hsl(158,64%,52%)] hover:bg-[hsl(158,64%,47%)]';\n  }\n};\n\nexport default function PortfolioSection() {\n  const { data: portfolioItems, isLoading } = useQuery({\n    queryKey: ['/api/portfolio/featured'],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const SketchfabEmbed = ({ modelId, title }: { modelId: string; title: string }) => (\n    <div className=\"aspect-video relative bg-gray-800 rounded-lg overflow-hidden\">\n      <iframe\n        src={`https://sketchfab.com/models/${modelId}/embed?autostart=0&ui_theme=dark&preload=0`}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"autoplay; fullscreen; vr\"\n        className=\"w-full h-full\"\n        loading=\"lazy\"\n        sandbox=\"allow-scripts allow-same-origin allow-presentation\"\n      />\n    </div>\n  );\n\n  return (\n    <section id=\"portfolio\" className=\"py-20 bg-[hsl(218,11%,15%)]\">\n      <div className=\"container mx-auto px-6\">\n        <h2 className=\"text-4xl font-bold text-center mb-16\">\n          Featured <span className=\"text-[hsl(199,89%,48%)]\">Captures</span>\n        </h2>\n        \n        {isLoading ? (\n          <div className=\"space-y-16\">\n            {Array.from({ length: 3 }).map((_, index) => (\n              <div key={index} className=\"grid lg:grid-cols-2 gap-12 items-center\">\n                <div>\n                  <Skeleton className=\"h-8 mb-4 bg-gray-700\" />\n                  <Skeleton className=\"h-24 mb-6 bg-gray-700\" />\n                  <div className=\"space-y-2 mb-8\">\n                    <Skeleton className=\"h-4 bg-gray-700\" />\n                    <Skeleton className=\"h-4 bg-gray-700\" />\n                    <Skeleton className=\"h-4 bg-gray-700\" />\n                  </div>\n                  <Skeleton className=\"h-12 w-32 bg-gray-700\" />\n                </div>\n                <Skeleton className=\"aspect-video bg-gray-700 rounded-xl\" />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-16\">\n            {(portfolioItems as PortfolioItem[])?.map((item: PortfolioItem, index: number) => {\n              const IconComponent = getIconForCategory(item.category);\n              const iconColor = getColorForCategory(item.category);\n              const buttonColor = getButtonColorForCategory(item.category);\n              const isReverse = index % 2 === 1;\n              \n              return (\n                <div \n                  key={item.id} \n                  className={`grid lg:grid-cols-2 gap-12 items-center ${isReverse ? 'lg:grid-flow-col-dense' : ''}`}\n                >\n                  <div className={isReverse ? 'lg:col-start-2' : ''}>\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <h3 className=\"text-3xl font-semibold\">{item.title}</h3>\n                      <Badge variant=\"secondary\" className=\"bg-[hsl(24,95%,53%)] text-white\">\n                        {item.category}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-gray-400 mb-6 leading-relaxed\">\n                      {item.description}\n                    </p>\n                    \n                    {item.tools && item.tools.length > 0 && (\n                      <div className=\"mb-6\">\n                        <span className={`${iconColor} font-semibold mr-3`}>Tools:</span>\n                        <div className=\"flex flex-wrap gap-2 mt-2\">\n                          {item.tools.map((tool, i) => (\n                            <Badge key={i} variant=\"outline\" className=\"border-gray-400 text-gray-200\">\n                              {tool}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Deliverables Section */}\n                    {(item.services && item.services.length > 0) && (\n                      <div className=\"mb-6\">\n                        <span className={`${iconColor} font-semibold mb-2 block`}>Deliverables:</span>\n                        <ul className=\"space-y-1 text-sm text-gray-300\">\n                          {item.services.map((service, i) => (\n                            <li key={i} className=\"flex items-start\">\n                              <span className=\"w-1.5 h-1.5 bg-[hsl(24,95%,53%)] rounded-full mr-2 mt-2 flex-shrink-0\"></span>\n                              {service}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex flex-wrap gap-3\">\n                      {item.sketchfabModelId && (\n                        <a \n                          href={`https://sketchfab.com/3d-models/${item.sketchfabModelId}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className={`inline-flex items-center ${buttonColor} text-white px-6 py-3 rounded-lg font-semibold transition-colors hover:opacity-90`}\n                        >\n                          <ExternalLink className=\"w-4 h-4 mr-2\" />\n                          View on Sketchfab\n                        </a>\n                      )}\n                      {item.modelFile && item.modelFormat && (\n                        <button \n                          onClick={() => {\n                            const modelElement = document.querySelector(`[data-model-id=\"${item.id}\"]`);\n                            if (modelElement) {\n                              modelElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                            }\n                          }}\n                          className={`inline-flex items-center ${buttonColor} text-white px-6 py-3 rounded-lg font-semibold transition-colors hover:opacity-90`}\n                        >\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          View in 3D\n                        </button>\n                      )}\n                      {item.videoFile && item.videoFormat && (\n                        <button \n                          onClick={() => {\n                            const videoElement = document.querySelector(`[data-video-id=\"${item.id}\"]`);\n                            if (videoElement) {\n                              videoElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                              const video = videoElement.querySelector('video');\n                              if (video) video.play();\n                            }\n                          }}\n                          className={`inline-flex items-center ${buttonColor} text-white px-6 py-3 rounded-lg font-semibold transition-colors hover:opacity-90`}\n                        >\n                          <PlayCircle className=\"w-4 h-4 mr-2\" />\n                          Watch Video\n                        </button>\n                      )}\n                      <button className=\"text-[hsl(199,89%,48%)] hover:text-white text-sm font-medium transition-colors\">\n                        See full project →\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div className={`relative ${isReverse ? 'lg:col-start-1 lg:row-start-1' : ''}`}>\n                    {item.sketchfabModelId ? (\n                      <div className=\"bg-gray-800 rounded-xl p-4\">\n                        <SketchfabEmbed modelId={item.sketchfabModelId} title={item.title} />\n                      </div>\n                    ) : item.modelFile && item.modelFormat ? (\n                      <div className=\"bg-gray-800 rounded-xl p-4\" data-model-id={item.id}>\n                        <ModelViewer \n                          modelFile={item.modelFile} \n                          modelFormat={item.modelFormat as 'glb' | 'gltf' | 'obj'} \n                          title={item.title} \n                          className=\"rounded-lg\"\n                        />\n                        <div className=\"absolute top-4 right-4 z-20 bg-black/60 text-white px-3 py-1 rounded-lg text-sm flex items-center gap-2\">\n                          <Eye className=\"w-3 h-3\" />\n                          Interactive 3D\n                        </div>\n                      </div>\n                    ) : item.videoFile && item.videoFormat ? (\n                      <div className=\"bg-gray-800 rounded-xl overflow-hidden relative\" data-video-id={item.id}>\n                        <video \n                          controls\n                          preload=\"metadata\"\n                          className=\"w-full h-auto aspect-video object-cover rounded-lg\"\n                          poster={item.featuredImage || \"https://images.unsplash.com/photo-1577223625816-7546f13df25d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"}\n                        >\n                          <source src={item.videoFile} type={`video/${item.videoFormat}`} />\n                          Your browser does not support the video tag.\n                        </video>\n                        <div className=\"absolute top-4 left-4 bg-black/70 text-white px-3 py-1 rounded-lg text-sm font-medium flex items-center gap-2\">\n                          <PlayCircle className=\"w-3 h-3\" />\n                          Video Walkthrough\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-800 rounded-xl overflow-hidden relative group\">\n                        <OptimizedImage\n                          src={item.featuredImage || \"https://images.unsplash.com/photo-1577223625816-7546f13df25d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"}\n                          alt={item.title}\n                          aspectRatio=\"video\"\n                          className=\"w-full h-auto\"\n                        />\n                        {item.images && item.images.length > 1 && (\n                          <div className=\"absolute bottom-4 right-4 bg-black/70 text-white px-3 py-1 rounded-lg text-sm\">\n                            +{item.images.length - 1} more images\n                          </div>\n                        )}\n                        <div className=\"absolute top-4 left-4 bg-black/70 text-white px-3 py-1 rounded-lg text-sm font-medium\">\n                          {item.category}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-16\">\n          <Link href=\"/gallery\">\n            <Button className=\"bg-[hsl(199,89%,48%)] hover:bg-[hsl(199,89%,43%)] text-white px-8 py-3 rounded-lg font-semibold text-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-blue-500\">\n              Explore Full Gallery\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":12474},"client/src/components/service-keywords.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Camera, Radar, Layers, Bot, CircuitBoard, Building } from \"lucide-react\";\n\nconst services = [\n  { icon: Camera, name: \"Photogrammetry\", color: \"text-[hsl(24,95%,53%)]\" },\n  { icon: Radar, name: \"LiDAR Scanning\", color: \"text-[hsl(199,89%,48%)]\" },\n  { icon: Layers, name: \"3D Reconstruction\", color: \"text-[hsl(158,64%,52%)]\" },\n  { icon: Bot, name: \"Bot Mapping\", color: \"text-[hsl(24,95%,53%)]\" },\n  { icon: CircuitBoard, name: \"Virtual Tours\", color: \"text-[hsl(199,89%,48%)]\" },\n  { icon: Building, name: \"Scan-to-BIM\", color: \"text-[hsl(158,64%,52%)]\" },\n];\n\nexport default function ServiceKeywords() {\n  const sectionRef = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const keywords = entry.target.querySelectorAll('.service-keyword');\n            keywords.forEach((keyword, index) => {\n              setTimeout(() => {\n                keyword.classList.add('animate-pulse');\n              }, index * 100);\n            });\n          }\n        });\n      },\n      { threshold: 0.3 }\n    );\n\n    if (sectionRef.current) {\n      observer.observe(sectionRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, []);\n\n  return (\n    <section ref={sectionRef} className=\"py-20 bg-gray-900\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-8\">\n          {services.map((service, index) => {\n            const IconComponent = service.icon;\n            return (\n              <div key={service.name} className=\"text-center service-keyword\">\n                <IconComponent className={`w-10 h-10 ${service.color} mb-4 mx-auto`} />\n                <h3 className=\"font-mono text-lg\">{service.name}</h3>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1987},"client/src/components/services-section.tsx":{"content":"import { Plane, CameraIcon, Crosshair, Bot, Home, Building, LucideIcon } from \"lucide-react\";\n\ninterface ServiceData {\n  icon: LucideIcon;\n  title: string;\n  subtitle: string;\n  color: string;\n  bgColor: string;\n  workflow: string[];\n}\n\ninterface ServiceCardProps {\n  service: ServiceData;\n}\n\nfunction ServiceCard({ service }: ServiceCardProps) {\n  const IconComponent = service.icon;\n  \n  const getGlowColor = (color: string) => {\n    switch(color) {\n      case 'drone-orange': return '#ff6600';\n      case 'sky-blue': return '#00aaff';\n      case 'tech-green': return '#33cc99';\n      default: return '#ff6600';\n    }\n  };\n\n  const getBackContent = (title: string) => {\n    switch(title) {\n      case 'Photogrammetry': return 'Precise 3D models from aerial photography with sub-centimeter accuracy';\n      case 'LiDAR Scanning': return 'Millimeter-precise point clouds for engineering-grade documentation';\n      case '3D Reconstruction': return 'Professional 3D assets ready for CAD, VR, and visualization workflows';\n      case 'Bot Mapping': return 'Autonomous aerial mapping with repeatable flight paths and progress tracking';\n      case 'Virtual Tours': return 'Immersive 360° experiences with interactive hotspots and measurements';\n      case 'Scan-to-BIM': return 'LOD 300+ BIM models from laser scan data for renovation projects';\n      default: return 'Professional reality capture solutions for your project needs';\n    }\n  };\n  \n  return (\n    <div className=\"flip-card-container perspective-1000 h-[180px] w-full\">\n      <div className=\"flip-card-inner relative w-full h-full transition-transform duration-600 ease-in-out transform-style-preserve-3d hover:scale-105\">\n        {/* Front of card - Minimal Design */}\n        <div className=\"flip-card-front absolute inset-0 w-full h-full backface-hidden bg-[#1e1e1e] rounded-xl shadow-md p-6 flex flex-col items-center justify-center text-center hover:shadow-lg transition-all duration-600\" \n             style={{'--glow-color': getGlowColor(service.color)} as any}>\n          <div className=\"mb-4\">\n            <IconComponent className={`w-12 h-12 ${\n              service.color === 'drone-orange' ? 'text-[hsl(24,95%,53%)]' : \n              service.color === 'sky-blue' ? 'text-[hsl(199,89%,48%)]' : \n              'text-[hsl(158,64%,52%)]'\n            } transition-transform duration-300`} />\n          </div>\n          \n          <h3 className=\"text-lg font-bold text-white\">{service.title}</h3>\n        </div>\n\n        {/* Back of card - Detailed Info */}\n        <div className=\"flip-card-back absolute inset-0 w-full h-full backface-hidden rotate-y-180 bg-[#1e1e1e] rounded-xl shadow-md p-4 flex flex-col justify-center text-center\"\n             style={{boxShadow: `0 0 20px ${getGlowColor(service.color)}33`}}>\n          <div className=\"mb-3\">\n            <IconComponent className={`w-8 h-8 ${\n              service.color === 'drone-orange' ? 'text-[hsl(24,95%,53%)]' : \n              service.color === 'sky-blue' ? 'text-[hsl(199,89%,48%)]' : \n              'text-[hsl(158,64%,52%)]'\n            } mx-auto animate-pulse`} />\n          </div>\n          \n          <h3 className=\"text-md font-bold text-white mb-2\">{service.title}</h3>\n          \n          <p className=\"text-xs text-gray-300 leading-relaxed mb-3\">\n            {getBackContent(service.title)}\n          </p>\n          \n          <ul className=\"space-y-1 text-xs text-gray-400 mb-3\">\n            {service.workflow.slice(0, 2).map((item, index) => (\n              <li key={index} className=\"flex items-center justify-center\">\n                <span className=\"w-1 h-1 bg-[hsl(24,95%,53%)] rounded-full mr-2\"></span>\n                {item.replace('• ', '')}\n              </li>\n            ))}\n          </ul>\n          \n          <button className=\"text-[hsl(199,89%,48%)] hover:text-white text-xs font-medium transition-colors\">\n            Learn More →\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst servicesData = [\n  {\n    icon: CameraIcon,\n    title: \"Photogrammetry\",\n    subtitle: \"Transform photos into precise 3D models with millimeter accuracy\", \n    color: \"drone-orange\",\n    bgColor: \"bg-[hsl(24,95%,53%)]\",\n    workflow: [\n      \"Sub-millimeter accuracy levels\",\n      \"Texture-mapped 3D models\", \n      \"Multiple export formats\",\n      \"Construction documentation\"\n    ]\n  },\n  {\n    icon: Crosshair,\n    title: \"LiDAR Scanning\",\n    subtitle: \"High-resolution point cloud data for detailed site analysis\",\n    color: \"sky-blue\", \n    bgColor: \"bg-[hsl(199,89%,48%)]\",\n    workflow: [\n      \"FARO & Leica scanner compatibility\",\n      \"Cloud-to-mesh processing\",\n      \"Revit & AutoCAD integration\",\n      \"As-built documentation\"\n    ]\n  },\n  {\n    icon: Building,\n    title: \"3D Reconstruction\",\n    subtitle: \"Convert reality capture data into actionable 3D models\",\n    color: \"tech-green\",\n    bgColor: \"bg-[hsl(158,64%,52%)]\",\n    workflow: [\n      \"Reality capture data processing\",\n      \"CAD-ready mesh generation\",\n      \"Design workflow integration\",\n      \"Planning optimization\"\n    ]\n  },\n  {\n    icon: Bot,\n    title: \"Bot Mapping\",\n    subtitle: \"Automated drone missions for large-scale site mapping\",\n    color: \"drone-orange\",\n    bgColor: \"bg-[hsl(24,95%,53%)]\",\n    workflow: [\n      \"Flight planning & automated execution\",\n      \"Large-scale site mapping\", \n      \"Real-time progress monitoring\",\n      \"Weather-optimized scheduling\"\n    ]\n  },\n  {\n    icon: Home,\n    title: \"Virtual Tours\",\n    subtitle: \"Interactive 3D experiences for real estate marketing\",\n    color: \"sky-blue\",\n    bgColor: \"bg-[hsl(199,89%,48%)]\",\n    workflow: [\n      \"360° immersive experiences\",\n      \"Interactive hotspot integration\",\n      \"Real estate marketing tools\",\n      \"Facility management solutions\"\n    ]\n  },\n  {\n    icon: Plane,\n    title: \"Scan-to-BIM\",\n    subtitle: \"Convert point clouds to Building Information Models\",\n    color: \"tech-green\",\n    bgColor: \"bg-[hsl(158,64%,52%)]\",\n    workflow: [\n      \"Point cloud to BIM conversion\",\n      \"LOD 300+ model accuracy\",\n      \"Renovation project support\",\n      \"Retrofit documentation\"\n    ]\n  }\n];\n\nexport default function ServicesSection() {\n  return (\n    <section id=\"services\" className=\"py-20 bg-[hsl(218,11%,15%)]\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <h2 className=\"text-4xl font-bold text-center mb-16\">\n          <span className=\"text-[hsl(199,89%,48%)]\">Capture</span> Workflows\n        </h2>\n        \n        {/* Single Horizontal Row */}\n        <div className=\"flex flex-wrap justify-center gap-4 mt-10 max-w-7xl mx-auto\">\n          {servicesData.map((service, index) => (\n            <div key={service.title} className=\"flex-1 min-w-[180px] max-w-[200px]\">\n              <ServiceCard service={service} />\n            </div>\n          ))}\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-gray-800 rounded-xl p-8 max-w-2xl mx-auto\">\n            <h3 className=\"text-2xl font-bold text-white mb-4\">\n              Ready to capture your project?\n            </h3>\n            <p className=\"text-gray-400 mb-6\">\n              Get a custom quote based on your specific requirements and timeline.\n            </p>\n            <button className=\"bg-[hsl(24,95%,53%)] hover:bg-[hsl(24,95%,48%)] text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 hover:shadow-lg transform hover:-translate-y-1\">\n              Get Free Quote →\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7606},"client/src/components/sketchfab-viewer.tsx":{"content":"import { Expand, Info } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function SketchfabViewer() {\n  const openFullscreen = () => {\n    window.open(\"https://sketchfab.com/3d-models/watchtower-shooting-house-f066d332c0d145c3b90ad32efde4b4a9\", \"_blank\");\n  };\n\n  return (\n    <div className=\"bg-gray-800 rounded-xl p-6 scanline-effect tech-glow\">\n      {/* Sketchfab embed */}\n      <div className=\"aspect-video rounded-lg overflow-hidden\">\n        <iframe \n          title=\"Watchtower | Shooting House\" \n          frameBorder=\"0\" \n          allowFullScreen \n          allow=\"autoplay; fullscreen; xr-spatial-tracking\" \n          src=\"https://sketchfab.com/models/f066d332c0d145c3b90ad32efde4b4a9/embed?autostart=1&preload=1&ui_theme=dark&camera=0\"\n          className=\"w-full h-full rounded-lg\"\n        />\n      </div>\n      <div className=\"mt-4 flex justify-between items-center\">\n        <div className=\"text-left\">\n          <p className=\"text-white font-semibold\">Watchtower | Shooting House</p>\n          <p className=\"text-gray-400 text-sm\">Interactive 3D photogrammetry scan</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={openFullscreen}\n            className=\"text-[hsl(199,89%,48%)] hover:text-white transition-colors\"\n          >\n            <Expand className=\"w-4 h-4 mr-2\" />\n            View on Sketchfab\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            className=\"text-[hsl(199,89%,48%)] hover:text-white transition-colors\"\n          >\n            <Info className=\"w-4 h-4 mr-2\" />\n            Details\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1778},"client/src/components/testimonials-section.tsx":{"content":"import { Star, Shield, Award } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Testimonial {\n  name: string;\n  role: string;\n  company: string;\n  content: string;\n  rating: number;\n}\n\nconst testimonials: Testimonial[] = [\n  {\n    name: \"Sarah Mitchell\",\n    role: \"Project Manager\",\n    company: \"Heritage Construction Co.\",\n    content: \"Chandler's 3D documentation of our historic renovation project was incredibly detailed. The precision of the LiDAR scans helped us identify structural issues we couldn't see otherwise.\",\n    rating: 5\n  },\n  {\n    name: \"Mike Torres\",\n    role: \"Real Estate Developer\",\n    company: \"Tennessee Properties LLC\",\n    content: \"The drone mapping service for our 50-acre development site was completed ahead of schedule. The deliverables were exactly what we needed for our engineering team.\",\n    rating: 5\n  }\n];\n\nconst trustSignals = [\n  {\n    icon: Shield,\n    title: \"FAA Part 107 Certified\",\n    description: \"Licensed commercial drone pilot\"\n  },\n  {\n    icon: Award,\n    title: \"Fully Insured\",\n    description: \"$1M liability coverage\"\n  },\n  {\n    icon: Star,\n    title: \"MTSU Certified\",\n    description: \"Construction Management degree\"\n  }\n];\n\nexport default function TestimonialsSection() {\n  return (\n    <section className=\"py-16 bg-gray-900\">\n      <div className=\"max-w-6xl mx-auto px-6\">\n        {/* Trust Signals */}\n        <div className=\"text-center mb-16\">\n          <Badge className=\"mb-4 bg-[hsl(158,64%,52%)] text-white\">Trusted & Certified</Badge>\n          <h2 className=\"text-3xl font-bold mb-8\">\n            Professional <span className=\"text-[hsl(158,64%,52%)]\">Credentials</span>\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {trustSignals.map((signal, index) => {\n              const IconComponent = signal.icon;\n              return (\n                <div key={index} className=\"flex flex-col items-center p-6 bg-gray-800 rounded-xl\">\n                  <IconComponent className=\"w-12 h-12 text-[hsl(158,64%,52%)] mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">{signal.title}</h3>\n                  <p className=\"text-gray-400 text-sm text-center\">{signal.description}</p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Testimonials */}\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold mb-4\">\n            Client <span className=\"text-[hsl(24,95%,53%)]\">Testimonials</span>\n          </h2>\n          <p className=\"text-gray-400 max-w-2xl mx-auto\">\n            Hear from clients who've experienced the precision and professionalism of our reality capture services.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {testimonials.map((testimonial, index) => (\n            <div key={index} className=\"bg-gray-800 rounded-xl p-8 border border-gray-700\">\n              <div className=\"flex items-center mb-4\">\n                {[...Array(testimonial.rating)].map((_, i) => (\n                  <Star key={i} className=\"w-5 h-5 text-[hsl(24,95%,53%)] fill-current\" />\n                ))}\n              </div>\n              <p className=\"text-gray-300 mb-6 leading-relaxed italic\">\n                \"{testimonial.content}\"\n              </p>\n              <div className=\"border-t border-gray-700 pt-4\">\n                <p className=\"text-white font-semibold\">{testimonial.name}</p>\n                <p className=\"text-gray-400 text-sm\">{testimonial.role}, {testimonial.company}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-12\">\n          <div className=\"bg-gradient-to-r from-[hsl(24,95%,53%)] to-[hsl(199,89%,48%)] rounded-xl p-8 max-w-2xl mx-auto\">\n            <h3 className=\"text-2xl font-bold text-white mb-4\">\n              Ready to capture your site?\n            </h3>\n            <p className=\"text-white/90 mb-6\">\n              Join our satisfied clients and experience professional reality capture services.\n            </p>\n            <button className=\"bg-white text-[hsl(24,95%,53%)] px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors\">\n              Book a scan now →\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4386},"client/src/components/theme-toggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sun, Moon } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('dark');\n\n  useEffect(() => {\n    // Check for saved theme preference or default to dark\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' || 'dark';\n    setTheme(savedTheme);\n    \n    // Apply theme to document\n    if (savedTheme === 'light') {\n      document.documentElement.classList.remove('dark');\n    } else {\n      document.documentElement.classList.add('dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    \n    if (newTheme === 'light') {\n      document.documentElement.classList.remove('dark');\n    } else {\n      document.documentElement.classList.add('dark');\n    }\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={toggleTheme}\n      className=\"text-gray-400 hover:text-white p-2\"\n      aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}\n    >\n      {/* Show sun icon when in dark mode (to switch to light) */}\n      {/* Show moon icon when in light mode (to switch to dark) */}\n      {theme === 'dark' ? (\n        <Sun className=\"w-5 h-5\" />\n      ) : (\n        <Moon className=\"w-5 h-5\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1472},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes instead of Infinity for better performance\n      gcTime: 10 * 60 * 1000, // 10 minutes cache time\n      retry: 1, // Retry once instead of never\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1526},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/blog-post.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport Navbar from \"@/components/navbar\";\nimport Footer from \"@/components/footer\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Calendar, Clock, ArrowLeft, Share2 } from \"lucide-react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function BlogPostPage() {\n  const { slug } = useParams();\n\n  const { data: post, isLoading } = useQuery<BlogPost>({\n    queryKey: ['/api/blog', slug],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    enabled: !!slug,\n  });\n\n  useEffect(() => {\n    if (post) {\n      document.title = `${post.title} - Six1Five Studio Blog | Reality Capture Insights`;\n      \n      const metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (metaDescription) {\n        metaDescription.setAttribute(\"content\", post.excerpt || \"Blog post from Six1Five Studio\");\n      }\n    }\n  }, [post]);\n\n  const readingTime = (content: string) => {\n    const wordsPerMinute = 200;\n    const words = content.split(' ').length;\n    return Math.ceil(words / wordsPerMinute);\n  };\n\n  const shareUrl = typeof window !== 'undefined' ? window.location.href : '';\n  const shareTitle = post?.title || '';\n\n  const handleShare = () => {\n    if (navigator.share) {\n      navigator.share({\n        title: shareTitle,\n        url: shareUrl,\n      });\n    } else {\n      navigator.clipboard.writeText(shareUrl);\n      // You could add a toast notification here\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[hsl(218,11%,15%)] text-white font-sans\">\n        <Navbar />\n        <main className=\"pt-20 pb-16\">\n          <div className=\"container mx-auto px-6 max-w-4xl\">\n            <Skeleton className=\"h-8 w-32 mb-8 bg-gray-700\" />\n            <Skeleton className=\"h-12 mb-4 bg-gray-700\" />\n            <Skeleton className=\"h-64 mb-8 bg-gray-700\" />\n            <div className=\"space-y-4\">\n              {Array.from({ length: 8 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-4 bg-gray-700\" />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!post) {\n    return (\n      <div className=\"min-h-screen bg-[hsl(218,11%,15%)] text-white font-sans\">\n        <Navbar />\n        <main className=\"pt-20 pb-16\">\n          <div className=\"container mx-auto px-6 max-w-4xl text-center\">\n            <h1 className=\"text-4xl font-bold mb-4\">Post Not Found</h1>\n            <p className=\"text-gray-400 mb-8\">The blog post you're looking for doesn't exist or has been moved.</p>\n            <Link href=\"/blog\">\n              <Button className=\"bg-[hsl(24,95%,53%)] hover:bg-[hsl(24,95%,48%)]\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Blog\n              </Button>\n            </Link>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(218,11%,15%)] text-white font-sans\">\n      <Navbar />\n      \n      <main className=\"pt-20 pb-16\">\n        <article className=\"container mx-auto px-6 max-w-4xl\">\n          {/* Back to Blog Link */}\n          <div className=\"mb-8\">\n            <Link href=\"/blog\">\n              <Button variant=\"outline\" className=\"border-gray-600 text-gray-300 hover:bg-gray-700\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Blog\n              </Button>\n            </Link>\n          </div>\n\n          {/* Featured Image */}\n          {post.featuredImage && (\n            <div className=\"mb-8 rounded-xl overflow-hidden\">\n              <img \n                src={post.featuredImage} \n                alt={post.title}\n                className=\"w-full h-64 md:h-96 object-cover\"\n              />\n            </div>\n          )}\n\n          {/* Article Header */}\n          <header className=\"mb-8\">\n            <div className=\"flex flex-wrap items-center space-x-4 text-sm text-gray-400 mb-6\">\n              <div className=\"flex items-center space-x-1\">\n                <Calendar className=\"w-4 h-4\" />\n                <span>{format(new Date(post.createdAt), 'MMMM dd, yyyy')}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Clock className=\"w-4 h-4\" />\n                <span>{readingTime(post.content)} min read</span>\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={handleShare}\n                className=\"text-gray-400 hover:text-white p-0\"\n              >\n                <Share2 className=\"w-4 h-4 mr-1\" />\n                Share\n              </Button>\n            </div>\n            \n            <h1 className=\"text-3xl md:text-5xl font-bold mb-6 leading-tight\">\n              {post.title}\n            </h1>\n            \n            {post.excerpt && (\n              <p className=\"text-xl text-gray-400 leading-relaxed mb-6\">\n                {post.excerpt}\n              </p>\n            )}\n            \n            {post.tags && post.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2\">\n                {post.tags.map((tag, i) => (\n                  <Badge key={i} variant=\"secondary\" className=\"bg-[hsl(24,95%,53%)] text-white\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </header>\n\n          {/* Article Content */}\n          <div className=\"prose prose-invert prose-lg max-w-none\">\n            <div \n              className=\"text-gray-300 leading-relaxed\"\n              dangerouslySetInnerHTML={{ __html: post.content.replace(/\\n/g, '<br/>') }}\n            />\n          </div>\n\n          {/* Article Footer */}\n          <footer className=\"mt-16 pt-8 border-t border-gray-700\">\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">About Six1Five Studio</h3>\n                <p className=\"text-gray-400 max-w-md\">\n                  Professional reality capture services specializing in drone mapping, LiDAR scanning, \n                  and photogrammetry for the AEC industry and heritage documentation.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <Link href=\"/#contact\">\n                  <Button className=\"bg-[hsl(24,95%,53%)] hover:bg-[hsl(24,95%,48%)] text-white px-6 py-3\">\n                    Start Your Project\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </footer>\n        </article>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6996},"client/src/pages/blog.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport Navbar from \"@/components/navbar\";\nimport Footer from \"@/components/footer\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Calendar, Clock, ArrowRight } from \"lucide-react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function Blog() {\n  useEffect(() => {\n    document.title = \"Reality Capture Blog - Six1Five Studio | Industry Insights & Tutorials\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\"content\", \"Expert insights on reality capture, drone mapping, LiDAR scanning, and photogrammetry. Learn about the latest techniques and regulations in the AEC industry.\");\n    }\n  }, []);\n\n  const { data: blogPosts, isLoading } = useQuery<BlogPost[]>({\n    queryKey: ['/api/blog'],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const featuredPost = blogPosts?.[0];\n  const otherPosts = blogPosts?.slice(1) || [];\n\n  const readingTime = (content: string) => {\n    const wordsPerMinute = 200;\n    const words = content.split(' ').length;\n    return Math.ceil(words / wordsPerMinute);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(218,11%,15%)] text-white font-sans\">\n      <Navbar />\n      \n      <main className=\"pt-20 pb-16\">\n        <div className=\"container mx-auto px-6\">\n          {/* Header */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n              Reality Capture <span className=\"text-[hsl(199,89%,48%)]\">Insights</span>\n            </h1>\n            <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n              Expert tutorials, industry insights, and the latest in drone mapping, LiDAR scanning, and photogrammetry technology.\n            </p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-8\">\n              {/* Featured Post Skeleton */}\n              <div className=\"bg-gray-800 rounded-xl overflow-hidden border border-gray-700\">\n                <Skeleton className=\"h-64 bg-gray-700\" />\n                <div className=\"p-8\">\n                  <Skeleton className=\"h-8 mb-4 bg-gray-700\" />\n                  <Skeleton className=\"h-4 mb-4 bg-gray-700\" />\n                  <div className=\"flex gap-2 mb-4\">\n                    <Skeleton className=\"h-6 w-20 bg-gray-700\" />\n                    <Skeleton className=\"h-6 w-16 bg-gray-700\" />\n                  </div>\n                  <Skeleton className=\"h-4 bg-gray-700\" />\n                </div>\n              </div>\n              \n              {/* Other Posts Skeleton */}\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {Array.from({ length: 6 }).map((_, i) => (\n                  <div key={i} className=\"bg-gray-800 rounded-xl overflow-hidden border border-gray-700\">\n                    <Skeleton className=\"h-48 bg-gray-700\" />\n                    <div className=\"p-6\">\n                      <Skeleton className=\"h-6 mb-3 bg-gray-700\" />\n                      <Skeleton className=\"h-4 mb-4 bg-gray-700\" />\n                      <div className=\"flex justify-between items-center\">\n                        <Skeleton className=\"h-4 w-20 bg-gray-700\" />\n                        <Skeleton className=\"h-4 w-16 bg-gray-700\" />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ) : blogPosts && Array.isArray(blogPosts) && blogPosts.length > 0 ? (\n            <div className=\"space-y-12\">\n              {/* Featured Post */}\n              {featuredPost && (\n                <article className=\"bg-gray-800 rounded-xl overflow-hidden shadow-lg border border-gray-700\">\n                  {featuredPost.featuredImage && (\n                    <div className=\"h-64 bg-gradient-to-r from-[hsl(24,95%,53%)] to-[hsl(199,89%,48%)] flex items-center justify-center\">\n                      <img \n                        src={featuredPost.featuredImage} \n                        alt={featuredPost.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  )}\n                  <div className=\"p-8\">\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-400 mb-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        <span>{format(new Date(featuredPost.createdAt), 'MMM dd, yyyy')}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        <span>{readingTime(featuredPost.content)} min read</span>\n                      </div>\n                    </div>\n                    \n                    <h2 className=\"text-3xl font-bold mb-4 hover:text-[hsl(24,95%,53%)] transition-colors\">\n                      <Link href={`/blog/${featuredPost.slug}`}>\n                        {featuredPost.title}\n                      </Link>\n                    </h2>\n                    \n                    <p className=\"text-gray-400 mb-6 text-lg leading-relaxed\">\n                      {featuredPost.excerpt}\n                    </p>\n                    \n                    <div className=\"flex flex-wrap gap-2 mb-6\">\n                      {featuredPost.tags?.map((tag: string, i: number) => (\n                        <Badge key={i} variant=\"secondary\" className=\"bg-[hsl(24,95%,53%)] text-white\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    <Link href={`/blog/${featuredPost.slug}`}>\n                      <span className=\"inline-flex items-center text-[hsl(199,89%,48%)] hover:text-[hsl(199,89%,38%)] transition-colors\">\n                        Read Full Article\n                        <ArrowRight className=\"w-4 h-4 ml-1\" />\n                      </span>\n                    </Link>\n                  </div>\n                </article>\n              )}\n\n              {/* Other Posts Grid */}\n              {otherPosts.length > 0 && (\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {otherPosts.map((post: BlogPost) => (\n                    <article key={post.id} className=\"bg-gray-800 rounded-xl overflow-hidden shadow-lg border border-gray-700 hover:border-gray-600 transition-colors\">\n                      {post.featuredImage ? (\n                        <img \n                          src={post.featuredImage} \n                          alt={post.title}\n                          className=\"w-full h-48 object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-48 bg-gradient-to-br from-[hsl(24,95%,53%)] to-[hsl(199,89%,48%)] flex items-center justify-center\">\n                          <div className=\"text-center\">\n                            <h3 className=\"text-white font-bold text-lg\">{post.title.substring(0, 30)}...</h3>\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"p-6\">\n                        <div className=\"flex items-center justify-between text-xs text-gray-400 mb-3\">\n                          <span>{format(new Date(post.createdAt), 'MMM dd')}</span>\n                          <span>{readingTime(post.content)} min</span>\n                        </div>\n                        \n                        <h3 className=\"text-lg font-semibold mb-3 hover:text-[hsl(24,95%,53%)] transition-colors\">\n                          <Link href={`/blog/${post.slug}`}>\n                            {post.title}\n                          </Link>\n                        </h3>\n                        \n                        <p className=\"text-gray-400 text-sm mb-4 line-clamp-3\">\n                          {post.excerpt}\n                        </p>\n                        \n                        {post.tags && post.tags.length > 0 && (\n                          <div className=\"flex flex-wrap gap-1 mb-4\">\n                            {post.tags.slice(0, 2).map((tag, i) => (\n                              <Badge key={i} variant=\"outline\" className=\"text-xs border-gray-600 text-gray-300\">\n                                {tag}\n                              </Badge>\n                            ))}\n                            {post.tags.length > 2 && (\n                              <Badge variant=\"outline\" className=\"text-xs border-gray-600 text-gray-300\">\n                                +{post.tags.length - 2}\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                        \n                        <Link href={`/blog/${post.slug}`}>\n                          <span className=\"text-[hsl(199,89%,48%)] hover:text-[hsl(199,89%,38%)] text-sm transition-colors\">\n                            Read More →\n                          </span>\n                        </Link>\n                      </div>\n                    </article>\n                  ))}\n                </div>\n              )}\n            </div>\n          ) : (\n            /* Empty State */\n            <div className=\"text-center py-16\">\n              <h2 className=\"text-2xl font-bold mb-4\">Coming Soon</h2>\n              <p className=\"text-gray-400 mb-8\">\n                We're working on bringing you expert insights and tutorials on reality capture technology. \n                Check back soon for the latest industry knowledge and practical guides.\n              </p>\n              <div className=\"grid md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n                <div className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n                  <h3 className=\"text-lg font-semibold mb-2 text-[hsl(24,95%,53%)]\">Drone Mapping</h3>\n                  <p className=\"text-gray-400 text-sm\">Complete guides on aerial surveying and photogrammetry workflows</p>\n                </div>\n                <div className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n                  <h3 className=\"text-lg font-semibold mb-2 text-[hsl(199,89%,48%)]\">LiDAR Technology</h3>\n                  <p className=\"text-gray-400 text-sm\">Deep dives into scanning techniques and point cloud processing</p>\n                </div>\n                <div className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n                  <h3 className=\"text-lg font-semibold mb-2 text-[hsl(158,64%,52%)]\">Industry Regulations</h3>\n                  <p className=\"text-gray-400 text-sm\">Updates on FAA regulations and best practices for professionals</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11203},"client/src/pages/faq.tsx":{"content":"import { useEffect } from \"react\";\nimport Navbar from \"@/components/navbar\";\nimport Footer from \"@/components/footer\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  Plane, \n  FileText, \n  DollarSign, \n  Clock, \n  MapPin, \n  Camera, \n  Settings, \n  Shield,\n  HelpCircle,\n  Phone\n} from \"lucide-react\";\n\nconst faqCategories = [\n  {\n    title: \"Drone Mapping & Regulations\",\n    icon: Plane,\n    color: \"text-[hsl(24,95%,53%)]\",\n    faqs: [\n      {\n        question: \"Do you have FAA Part 107 certification?\",\n        answer: \"Yes, I hold a current FAA Part 107 Remote Pilot Certificate, which is required for commercial drone operations in the United States. This certification ensures all flights are conducted safely and legally according to federal aviation regulations.\"\n      },\n      {\n        question: \"What are the restrictions for drone flights in Tennessee?\",\n        answer: \"Tennessee follows federal FAA regulations. Key restrictions include: maximum altitude of 400 feet AGL, maintaining visual line of sight, no flights over people without waivers, and restricted airspace around airports. I handle all airspace authorizations and NOTAMs required for your project.\"\n      },\n      {\n        question: \"Can you fly drones in restricted airspace?\",\n        answer: \"Yes, with proper authorization. I can obtain LAANC (Low Altitude Authorization and Notification Capability) approvals for controlled airspace and submit special use airspace requests when required. This process typically takes 1-3 business days depending on the location.\"\n      },\n      {\n        question: \"What weather conditions affect drone operations?\",\n        answer: \"Drone operations are weather-dependent. Flights are cancelled or rescheduled for: winds exceeding 25 mph, precipitation, fog with visibility less than 3 miles, and temperatures below 14°F or above 104°F. I monitor weather conditions closely and will reschedule if safety is compromised.\"\n      }\n    ]\n  },\n  {\n    title: \"Services & Deliverables\",\n    icon: Camera,\n    color: \"text-[hsl(199,89%,48%)]\",\n    faqs: [\n      {\n        question: \"What's included in a typical photogrammetry project?\",\n        answer: \"Standard deliverables include: high-resolution orthomosaic maps, digital surface models (DSM), point clouds, 3D textured models, and measurement reports. All data is provided in industry-standard formats (GeoTIFF, LAS, PLY, FBX) and includes metadata and accuracy reports.\"\n      },\n      {\n        question: \"How accurate are your survey-grade measurements?\",\n        answer: \"Accuracy depends on the method and ground control points used. With RTK/PPK GPS and ground control points, horizontal accuracy is typically 1-3cm and vertical accuracy is 2-5cm. For standard mapping without GCPs, accuracy ranges from 1-3 meters, suitable for most planning and monitoring applications.\"\n      },\n      {\n        question: \"Can you integrate with existing CAD/BIM workflows?\",\n        answer: \"Absolutely. I deliver data in formats compatible with AutoCAD, Revit, SketchUp, ArcGIS, and other professional software. Point clouds can be directly imported into Autodesk ReCap, and I can provide specific coordinate systems to match your existing project requirements.\"\n      },\n      {\n        question: \"Do you provide LiDAR scanning services?\",\n        answer: \"Yes, I offer terrestrial LiDAR scanning for detailed interior and close-range exterior mapping. This technology captures sub-centimeter accuracy and is ideal for as-built documentation, heritage preservation, and complex structural analysis where photogrammetry limitations exist.\"\n      }\n    ]\n  },\n  {\n    title: \"Project Timeline & Costs\",\n    icon: Clock,\n    color: \"text-[hsl(158,64%,52%)]\",\n    faqs: [\n      {\n        question: \"How long does a typical mapping project take?\",\n        answer: \"Project timelines vary by scope: Small sites (1-5 acres): 1-2 days field work, 3-5 days processing. Medium sites (5-50 acres): 2-3 days field work, 5-10 days processing. Large sites (50+ acres): 3-7 days field work, 10-15 days processing. Rush delivery is available for 25% additional cost.\"\n      },\n      {\n        question: \"What factors affect project pricing?\",\n        answer: \"Pricing is based on: site size and complexity, required accuracy level, deliverable formats needed, travel distance from Nashville metro area, timeline requirements, and special permits or airspace authorizations required. Contact me for a detailed quote based on your specific needs.\"\n      },\n      {\n        question: \"Do you offer multi-phase monitoring services?\",\n        answer: \"Yes, I provide ongoing construction progress monitoring and change detection services. Multi-phase contracts include baseline mapping, scheduled progress flights, automated change detection analysis, and progress reporting. This typically reduces per-flight costs by 15-30%.\"\n      },\n      {\n        question: \"What's your service area coverage?\",\n        answer: \"Primary service area covers middle Tennessee including Nashville metro, Murfreesboro, Franklin, and surrounding counties. I also travel throughout Tennessee and neighboring states for larger projects. Travel time and expenses are included in project quotes for sites beyond the primary service area.\"\n      }\n    ]\n  },\n  {\n    title: \"Equipment & Technology\",\n    icon: Settings,\n    color: \"text-[hsl(44,87%,47%)]\",\n    faqs: [\n      {\n        question: \"What drone and camera equipment do you use?\",\n        answer: \"Primary platform is the DJI Mini 4 Pro with 4K/60fps camera and mechanical 3-axis gimbal. For specialized applications, I also use the DJI Air 2S and various payload options. All equipment is regularly calibrated and maintained according to manufacturer specifications.\"\n      },\n      {\n        question: \"What software do you use for processing?\",\n        answer: \"I use professional photogrammetry software including Agisoft Metashape, RealityCapture, and PIX4D for data processing. Point cloud analysis is performed in CloudCompare and AutoDesk ReCap. This ensures compatibility with your existing workflows and industry-standard output quality.\"\n      },\n      {\n        question: \"How do you ensure data quality and accuracy?\",\n        answer: \"Quality assurance includes: pre-flight mission planning with overlap verification, real-time image quality monitoring, ground control point placement with RTK GPS, automated quality reports during processing, and final accuracy verification against known coordinates.\"\n      },\n      {\n        question: \"Can you capture thermal or multispectral data?\",\n        answer: \"Currently focused on high-resolution RGB photogrammetry and LiDAR. For thermal or multispectral requirements, I partner with specialized operators who have the appropriate sensors and certifications for agricultural, environmental, or industrial inspection applications.\"\n      }\n    ]\n  },\n  {\n    title: \"Data Security & Legal\",\n    icon: Shield,\n    color: \"text-[hsl(280,65%,60%)]\",\n    faqs: [\n      {\n        question: \"How is my project data protected?\",\n        answer: \"All data is encrypted during transfer and storage. Raw imagery and processed deliverables are stored on secure, backed-up servers with access limited to authorized personnel. Data retention policies and confidentiality agreements are available for sensitive projects.\"\n      },\n      {\n        question: \"Do you carry insurance for drone operations?\",\n        answer: \"Yes, I maintain comprehensive commercial drone insurance including general liability, professional liability, and equipment coverage. Certificates of insurance can be provided to clients and their insurance companies as required for project compliance.\"\n      },\n      {\n        question: \"Who owns the rights to captured images and data?\",\n        answer: \"Clients retain full ownership rights to all deliverable data and processed outputs upon final payment. Raw imagery and flight data are retained for backup purposes according to our data retention policy, but ownership transfers to the client.\"\n      },\n      {\n        question: \"Can you work on secure or restricted sites?\",\n        answer: \"Yes, I can work on secure facilities with proper authorization. This includes background checks, site-specific safety training, escort requirements, and modified data handling procedures as needed. Additional time and costs may apply for security compliance.\"\n      }\n    ]\n  }\n];\n\nexport default function FAQ() {\n  useEffect(() => {\n    document.title = \"FAQ - Six1Five Studio | Reality Capture Questions & Answers\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\"content\", \"Get answers to common questions about drone mapping, LiDAR scanning, regulations, pricing, and project timelines. Expert reality capture services in Tennessee.\");\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(218,11%,15%)] text-white font-sans\">\n      <Navbar />\n      \n      <main className=\"pt-20 pb-16\">\n        <div className=\"container mx-auto px-6 max-w-4xl\">\n          {/* Header */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n              Frequently Asked <span className=\"text-[hsl(199,89%,48%)]\">Questions</span>\n            </h1>\n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto\">\n              Everything you need to know about reality capture services, drone regulations, \n              project timelines, and working with Six1Five Studio.\n            </p>\n          </div>\n\n          {/* FAQ Categories */}\n          <div className=\"space-y-12\">\n            {faqCategories.map((category, categoryIndex) => {\n              const IconComponent = category.icon;\n              return (\n                <section key={categoryIndex} className=\"bg-gray-800 rounded-xl p-8 border border-gray-700\">\n                  <div className=\"flex items-center space-x-3 mb-6\">\n                    <IconComponent className={`w-6 h-6 ${category.color}`} />\n                    <h2 className=\"text-2xl font-bold\">{category.title}</h2>\n                    <Badge variant=\"outline\" className=\"border-gray-600 text-gray-300\">\n                      {category.faqs.length} questions\n                    </Badge>\n                  </div>\n                  \n                  <Accordion type=\"multiple\" className=\"space-y-2\">\n                    {category.faqs.map((faq, faqIndex) => (\n                      <AccordionItem \n                        key={faqIndex} \n                        value={`${categoryIndex}-${faqIndex}`}\n                        className=\"border-gray-700\"\n                      >\n                        <AccordionTrigger className=\"text-left hover:text-[hsl(24,95%,53%)] transition-colors\">\n                          {faq.question}\n                        </AccordionTrigger>\n                        <AccordionContent className=\"text-gray-400 leading-relaxed\">\n                          {faq.answer}\n                        </AccordionContent>\n                      </AccordionItem>\n                    ))}\n                  </Accordion>\n                </section>\n              );\n            })}\n          </div>\n\n          {/* Still Have Questions Section */}\n          <div className=\"mt-16 bg-gradient-to-r from-[hsl(24,95%,53%)] to-[hsl(199,89%,48%)] rounded-xl p-8 text-center\">\n            <HelpCircle className=\"w-12 h-12 mx-auto mb-4 text-white\" />\n            <h2 className=\"text-2xl font-bold mb-4 text-white\">Still Have Questions?</h2>\n            <p className=\"text-white/90 mb-6 max-w-2xl mx-auto\">\n              Can't find what you're looking for? I'm here to help with any specific questions \n              about your project requirements, technical specifications, or service details.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/#contact\">\n                <Button variant=\"secondary\" className=\"bg-white text-[hsl(24,95%,53%)] hover:bg-gray-100\">\n                  Get Project Quote\n                </Button>\n              </Link>\n              <Button \n                variant=\"outline\" \n                className=\"border-white text-white hover:bg-white/10\"\n                onClick={() => window.open('tel:+19315888997', '_self')}\n              >\n                <Phone className=\"w-4 h-4 mr-2\" />\n                Call (931) 588-8997\n              </Button>\n            </div>\n          </div>\n\n          {/* Quick Contact Links */}\n          <div className=\"mt-12 grid md:grid-cols-3 gap-6\">\n            <div className=\"bg-gray-800 rounded-lg p-6 text-center border border-gray-700\">\n              <FileText className=\"w-8 h-8 text-[hsl(24,95%,53%)] mx-auto mb-3\" />\n              <h3 className=\"font-semibold mb-2\">Project Requirements</h3>\n              <p className=\"text-gray-400 text-sm mb-4\">Need help defining your project scope and deliverables?</p>\n              <Link href=\"/#contact\">\n                <Button size=\"sm\" variant=\"outline\" className=\"border-gray-600 text-gray-300 hover:bg-gray-700\">\n                  Get Consultation\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"bg-gray-800 rounded-lg p-6 text-center border border-gray-700\">\n              <DollarSign className=\"w-8 h-8 text-[hsl(199,89%,48%)] mx-auto mb-3\" />\n              <h3 className=\"font-semibold mb-2\">Custom Pricing</h3>\n              <p className=\"text-gray-400 text-sm mb-4\">Large project or ongoing monitoring needs?</p>\n              <Link href=\"/#contact\">\n                <Button size=\"sm\" variant=\"outline\" className=\"border-gray-600 text-gray-300 hover:bg-gray-700\">\n                  Request Quote\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"bg-gray-800 rounded-lg p-6 text-center border border-gray-700\">\n              <MapPin className=\"w-8 h-8 text-[hsl(158,64%,52%)] mx-auto mb-3\" />\n              <h3 className=\"font-semibold mb-2\">Service Area</h3>\n              <p className=\"text-gray-400 text-sm mb-4\">Questions about coverage in your location?</p>\n              <Link href=\"/#contact\">\n                <Button size=\"sm\" variant=\"outline\" className=\"border-gray-600 text-gray-300 hover:bg-gray-700\">\n                  Check Coverage\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":14776},"client/src/pages/gallery.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport Navbar from \"@/components/navbar\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ExternalLink, Filter, Grid, Grid3X3 } from \"lucide-react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport type { PortfolioItem } from \"@shared/schema\";\n\nexport default function Gallery() {\n  const [viewMode, setViewMode] = useState<'grid' | 'detailed'>('grid');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n\n  useEffect(() => {\n    document.title = \"3D Model Gallery - Six1Five Studio | Reality Capture Portfolio\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\"content\", \"Explore our complete collection of 3D models, photogrammetry captures, and LiDAR scans. Interactive Sketchfab viewers for AEC, construction, and heritage documentation projects.\");\n    }\n  }, []);\n\n  const { data: portfolioItems, isLoading } = useQuery({\n    queryKey: ['/api/portfolio'],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const categories = ['all', 'photogrammetry', 'lidar', 'construction', 'heritage', 'interior'];\n  \n  const filteredItems = (portfolioItems as PortfolioItem[])?.filter((item: PortfolioItem) => \n    selectedCategory === 'all' || item.category === selectedCategory\n  ) || [];\n\n  const SketchfabEmbed = ({ modelId, title }: { modelId: string; title: string }) => (\n    <div className=\"aspect-video relative bg-gray-800 rounded-lg overflow-hidden\">\n      <iframe\n        src={`https://sketchfab.com/models/${modelId}/embed?autostart=0&ui_theme=dark`}\n        title={title}\n        frameBorder=\"0\"\n        allow=\"autoplay; fullscreen; vr\"\n        className=\"w-full h-full\"\n        loading=\"lazy\"\n      />\n      <div className=\"absolute top-2 right-2\">\n        <Button\n          size=\"sm\"\n          variant=\"secondary\"\n          onClick={() => window.open(`https://sketchfab.com/3d-models/${modelId}`, '_blank')}\n        >\n          <ExternalLink className=\"w-3 h-3 mr-1\" />\n          View on Sketchfab\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(218,11%,15%)] text-white font-sans\">\n      <Navbar />\n      \n      <main className=\"pt-20 pb-16\">\n        <div className=\"container mx-auto px-6\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n              3D Model <span className=\"text-[hsl(199,89%,48%)]\">Gallery</span>\n            </h1>\n            <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n              Explore our complete collection of reality capture projects. Each model tells a story of precision, innovation, and digital transformation.\n            </p>\n          </div>\n\n          {/* Filters and View Toggle */}\n          <div className=\"flex flex-col md:flex-row justify-between items-center mb-8 gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"w-4 h-4 text-gray-400\" />\n              <div className=\"flex flex-wrap gap-2\">\n                {categories.map((category) => (\n                  <Button\n                    key={category}\n                    variant={selectedCategory === category ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedCategory(category)}\n                    className={selectedCategory === category \n                      ? \"bg-[hsl(24,95%,53%)] hover:bg-[hsl(24,95%,48%)]\"\n                      : \"border-gray-400 text-gray-200 hover:bg-gray-600 hover:border-gray-300\"\n                    }\n                  >\n                    {category.charAt(0).toUpperCase() + category.slice(1)}\n                  </Button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant={viewMode === 'grid' ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode('grid')}\n                className={viewMode === 'grid' \n                  ? \"bg-[hsl(199,89%,48%)]\" \n                  : \"border-gray-400 text-gray-200 hover:bg-gray-600 hover:border-gray-300\"\n                }\n              >\n                <Grid3X3 className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === 'detailed' ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode('detailed')}\n                className={viewMode === 'detailed' \n                  ? \"bg-[hsl(199,89%,48%)]\" \n                  : \"border-gray-400 text-gray-200 hover:bg-gray-600 hover:border-gray-300\"\n                }\n              >\n                <Grid className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Portfolio Grid */}\n          {isLoading ? (\n            <div className={`grid gap-6 ${viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' : 'grid-cols-1 lg:grid-cols-2'}`}>\n              {Array.from({ length: 6 }).map((_, i) => (\n                <div key={i} className=\"bg-gray-800 rounded-xl p-6\">\n                  <Skeleton className=\"aspect-video mb-4 bg-gray-700\" />\n                  <Skeleton className=\"h-6 mb-2 bg-gray-700\" />\n                  <Skeleton className=\"h-4 mb-4 bg-gray-700\" />\n                  <div className=\"flex gap-2\">\n                    <Skeleton className=\"h-6 w-16 bg-gray-700\" />\n                    <Skeleton className=\"h-6 w-20 bg-gray-700\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className={`grid gap-6 ${viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' : 'grid-cols-1 lg:grid-cols-2'}`}>\n              {filteredItems.map((item: PortfolioItem) => (\n                <div key={item.id} className=\"bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-700\">\n                  {item.sketchfabModelId ? (\n                    <SketchfabEmbed modelId={item.sketchfabModelId} title={item.title} />\n                  ) : (\n                    <div className=\"aspect-video bg-gray-700 rounded-lg flex items-center justify-center mb-4\">\n                      <p className=\"text-gray-400\">No 3D model available</p>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-4\">\n                    <h3 className=\"text-xl font-semibold mb-2\">{item.title}</h3>\n                    <p className=\"text-gray-400 mb-4 line-clamp-3\">{item.description}</p>\n                    \n                    <div className=\"space-y-3\">\n                      <div>\n                        <Badge variant=\"secondary\" className=\"bg-[hsl(24,95%,53%)] text-white\">\n                          {item.category}\n                        </Badge>\n                      </div>\n                      \n                      {item.tools && item.tools.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1\">\n                          {item.tools.map((tool, i) => (\n                            <Badge key={i} variant=\"outline\" className=\"text-xs border-gray-400 text-gray-200\">\n                              {tool}\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {filteredItems.length === 0 && !isLoading && (\n            <div className=\"text-center py-16\">\n              <p className=\"text-xl text-gray-400 mb-4\">No models found in this category</p>\n              <Button onClick={() => setSelectedCategory('all')} className=\"bg-[hsl(24,95%,53%)] hover:bg-[hsl(24,95%,48%)]\">\n                View All Models\n              </Button>\n            </div>\n          )}\n\n          {/* CTA Section */}\n          <div className=\"mt-16 text-center bg-gray-800 rounded-xl p-8 border border-gray-700\">\n            <h2 className=\"text-2xl font-bold mb-4\">Ready to Create Your Own 3D Model?</h2>\n            <p className=\"text-gray-400 mb-6 max-w-2xl mx-auto\">\n              From concept to completion, we deliver high-quality reality capture services that bring your projects into the digital realm.\n            </p>\n            <Link href=\"/#contact\">\n              <Button className=\"bg-[hsl(24,95%,53%)] hover:bg-[hsl(24,95%,48%)] text-white px-8 py-3 rounded-lg font-semibold\">\n                Start Your Project\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":8958},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport Navbar from \"@/components/navbar\";\nimport HeroSection from \"@/components/hero-section\";\nimport ServiceKeywords from \"@/components/service-keywords\";\nimport ServicesSection from \"@/components/services-section\";\nimport AIWorkflowShowcase from \"@/components/ai-workflow-showcase\";\nimport AboutSection from \"@/components/about-section\";\nimport PortfolioSection from \"@/components/portfolio-section\";\nimport TestimonialsSection from \"@/components/testimonials-section\";\nimport ContactSection from \"@/components/contact-section\";\nimport FinalCTABanner from \"@/components/final-cta-banner\";\nimport Footer from \"@/components/footer\";\n\nexport default function Home() {\n  useEffect(() => {\n    document.title = \"Six1Five Studio - Reality Capture Portfolio | Chandler Hopkins\";\n    \n    // Add meta description for SEO\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (!metaDescription) {\n      const meta = document.createElement(\"meta\");\n      meta.name = \"description\";\n      meta.content = \"Professional reality capture services in Nashville, TN. Drone mapping, LiDAR scanning, and photogrammetry for AEC, real estate, and historic preservation by Chandler Hopkins.\";\n      document.head.appendChild(meta);\n    }\n\n    // Add structured data for local business\n    const structuredData = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"LocalBusiness\",\n      \"name\": \"Six1Five Studio\",\n      \"description\": \"Professional reality capture services specializing in drone mapping, LiDAR scanning, and photogrammetry\",\n      \"url\": \"https://six1fivestudio.com\",\n      \"telephone\": \"+1-931-588-8997\",\n      \"email\": \"admin@six1fivestudio.com\",\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"addressLocality\": \"La Vergne\",\n        \"addressRegion\": \"TN\",\n        \"addressCountry\": \"US\"\n      },\n      \"geo\": {\n        \"@type\": \"GeoCoordinates\",\n        \"latitude\": \"36.0156\",\n        \"longitude\": \"-86.5804\"\n      },\n      \"serviceArea\": {\n        \"@type\": \"State\",\n        \"name\": \"Tennessee\"\n      },\n      \"hasOfferCatalog\": {\n        \"@type\": \"OfferCatalog\",\n        \"name\": \"Reality Capture Services\",\n        \"itemListElement\": [\n          {\n            \"@type\": \"Offer\",\n            \"itemOffered\": {\n              \"@type\": \"Service\",\n              \"name\": \"Drone Mapping\",\n              \"description\": \"Aerial photogrammetry and mapping services using professional drone equipment\"\n            }\n          },\n          {\n            \"@type\": \"Offer\",\n            \"itemOffered\": {\n              \"@type\": \"Service\", \n              \"name\": \"LiDAR Scanning\",\n              \"description\": \"High-precision 3D laser scanning for interior and exterior documentation\"\n            }\n          },\n          {\n            \"@type\": \"Offer\",\n            \"itemOffered\": {\n              \"@type\": \"Service\",\n              \"name\": \"Photogrammetry\",\n              \"description\": \"3D model reconstruction from photographs for AEC and heritage documentation\"\n            }\n          }\n        ]\n      },\n      \"sameAs\": [\n        \"https://www.linkedin.com/in/chandler-hopkins-057164185/\",\n        \"https://substack.com/@digitalblueprints\"\n      ]\n    };\n\n    // Add structured data script\n    const existingScript = document.querySelector('script[type=\"application/ld+json\"]');\n    if (!existingScript) {\n      const script = document.createElement('script');\n      script.type = 'application/ld+json';\n      script.textContent = JSON.stringify(structuredData);\n      document.head.appendChild(script);\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(218,11%,15%)] text-white font-sans\">\n      <Navbar />\n      <HeroSection />\n      <ServiceKeywords />\n      <ServicesSection />\n      <AIWorkflowShowcase />\n      <AboutSection />\n      <PortfolioSection />\n      <TestimonialsSection />\n      <ContactSection />\n      <FinalCTABanner />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3968},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/optimized-image.tsx":{"content":"import { useState } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface OptimizedImageProps {\n  src: string;\n  alt: string;\n  className?: string;\n  fallbackSrc?: string;\n  aspectRatio?: \"video\" | \"square\" | \"auto\";\n}\n\nexport default function OptimizedImage({ \n  src, \n  alt, \n  className = \"\", \n  fallbackSrc = \"https://images.unsplash.com/photo-1577223625816-7546f13df25d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  aspectRatio = \"auto\"\n}: OptimizedImageProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const aspectClasses = {\n    video: \"aspect-video\",\n    square: \"aspect-square\", \n    auto: \"\"\n  };\n\n  return (\n    <div className={`relative overflow-hidden ${aspectClasses[aspectRatio]} ${className}`}>\n      {isLoading && (\n        <Skeleton className=\"absolute inset-0 bg-gray-700\" />\n      )}\n      <img\n        src={hasError ? fallbackSrc : src}\n        alt={alt}\n        className={`w-full h-full object-cover transition-opacity duration-300 ${\n          isLoading ? \"opacity-0\" : \"opacity-100\"\n        }`}\n        loading=\"lazy\"\n        decoding=\"async\"\n        onLoad={() => setIsLoading(false)}\n        onError={() => {\n          setHasError(true);\n          setIsLoading(false);\n        }}\n      />\n    </div>\n  );\n}","size_bytes":1329}},"version":1}